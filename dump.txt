INSERT INTO articles VALUES(1,'github pagesに引越し',replace('jekyllとか色々覚えることが多そうなのでpythonで必要最低限のhtmlのジェネレータを作ってgithub pagesにお引越ししてみました。\n\n記事の情報はyamlで管理して、そいつをパースしてhtmlに吐き出すという感じにしてるのですが、自分しか使わないしかなり雑。\n\n記事の情報管理をyamlでやるのはすごくいいということがわかってきました。\n\nyamlは\n```yaml\ntitle: github pagesに引越し\nslug: moved_to_gh_page\nutime: 1455438723\ndate: 2016/02/14 17:32:03\ntags:\n  - タグ\nactive: true\nbody: |-\n  ほにゃらら\n```\n\nという構成にしていて、こいつをpythonのPyYamlで読み込んだ結果をjinja2で書いたテンプレートにrenderしてやるようにしています。\n\n面倒なのが、リポジトリのトップにあるindex.htmlへ記事の追加を反映しなくてはいけないので都度ビルドコマンドを叩くようにしています。\n\nこの辺はいちいちコマンドを叩かずに変更を監視して自動でビルドするようにしたいなぁと。\n\nまあとにかくブログに特化するというのであればgithub pagesでもイケそうな気がする。','\n',char(10)),1,'2016-02-14 17:32:03','2016-02-14 17:32:03');
INSERT INTO articles VALUES(2,'github pagesの構成を変えた',replace('引越しをした時は、pythonで記事データになるyamlファイルをビルドしてhtmlをした後にindex.htmlにリンクを載せるという方法を取っていました。\n\nこのやり方でも問題はないんですが、yamlとhtmlが重複してしまいなんともいけてない感じがしたので、yamlをjsで読み取る方法にしました。\n\nどうせgithubがストレージなんだし記事の目録を作ってやってjsでyamlファイルをパースしてやればええがなという動機です。SPAの利です。\n\njsのフレームワークはなんとなく好きなmithrilを使って組んでいます。ブログみたいな単純なものならちょろっと書けるので最高。\n\nでも結局は、目録を作るというのに変わっただけで記事を新規作成ないし削除をしたら目録を更新しないといけません。circleciとか使ってうまくできないか調べよう。\n\nところで、webpackのloaderは本当に最高で何も考えずにただただ`yaml-loader`を使えば全てが丸く収まるのでもうwebpackから抜け出せなくなりました。\n\nガンガン使っていきましょう。','\n',char(10)),1,'2016-02-21 18:38:37','2016-02-21 18:38:37');
INSERT INTO articles VALUES(3,'pythonの__new__とかtypeなど',replace('pythonコードの読み書き練習のために便利ツールの[percol](https://github.com/mooz/percol)のリファクタリングを始めました。\n\n`percol.finder`という文字列検索処理をしてるっぽいモジュールでメタクラスが使われていたのでメタクラスについてエキパイを読み直しました。\n\nつっても、`percol.finder.Finder`クラスは[ただの抽象基底クラスというだけっぽい。](https://github.com/mooz/percol/blob/master/percol/finder.py#L11-L37)\n\nメタプログラミングなんて高度なことをする場面は中々ないと思うけど、とりあえず`__new__`と`type()`について忘れたくないのでメモ。\n\n```\n$ python -V\nPython 3.5.0\n```\n\n# \_\_new\_\_\n`__new__`はインスタンスを作成しようとする時に毎回実行される。エキパイ的には`meta-constructor`と説明されている。\n\n```python\nclass C(object):\n  def __new__(cls, *args, **kwargs):\n      print(''args: {}''.format(args))\n      print(''kargs: {}''.format(kwargs))\n      print(''__new__ called.'')\n      ins = object.__new__(cls)\n      print(''created instance'')\n      ins.hoge = ''hoge''\n      return ins\n\n  def __init__(self, arg):\n      print(''__init__ called.'')\n      self._fuga = arg\n\n  @property\n  def fuga(self):\n      return self._fuga + self.hoge\n\n\nprint(C(''fuga'').fuga)\n# args: (''fuga'',)\n# kargs: {}\n# __new__ called.\n# created instance\n# __init__ called.\n# fugahoge\n```\n\n`__new__`はクラスオブジェクトを引数にとって必ずインスタンスを返さなくてはいけない。つまり、インスタンスを作成する前にクラスオブジェクトを煮るなる焼くなり自由にいじり倒すことができるわけだ。\n\nで、この`C`クラスを継承した場合、子クラスから親クラスの`__init__()`を呼び出すには`super()`をしないといけない。\n\n```pytyhon\nclass C(object):\n    def __new__(cls, *args, **kwargs):\n        print(''C.__new__ called.'')\n        return object.__new__(cls)\n\n    def __init__(self):\n        print(''C.__init__ called.'')\n\n\nclass D(C):\n    def __init__(self):\n        print(''D.__init__() called'')\n\n\nclass E(C):\n    def __init__(self):\n        super().__init__()\n        print(''E.__init__() called'')\n\n\nprint(D())\n# C.__new__ called.\n# D.__init__() called\n# <__main__.D object at 0x104616f28>\n\nprint(E())\n# C.__new__ called.\n# C.__init__ called.\n# E.__init__() called\n# <__main__.E object at 0x104616f98>\n```\n\nなるほど。\n\n# metaclassとtype\n`metaclass`はクラスのコンストラクタに渡すキーワード引数になる。python2では`__metaclass__`というクラス属性。\n\n`metaclass`は`type()`と同じ形式の引数を取る関数が指定する。\n\n```python\ndef mymetaclass(cls, base, _dict):\n  if ''__cat__'' in _dict:\n      _dict[''__cat__''] = \\n          ''oh! my {}''.format(_dict.get(''__cat__'', ''''))\n  return type(cls, base, _dict)\n\n\nclass A(object, metaclass=mymetaclass):\n    __cat__ = ''neko''\n\n\nprint(a.__cat__)\n# oh! my neko\n```\n\n全く実用的な例ではないけど、クラスの属性を自由に操作できる。というか、`type()`に渡す基底クラスを変えてしまえば自由にクラスオブジェクトを変更できてしまう。\n\nエキパイにも\n\n>For changing the read-write attributes or adding new ones, metaclasses can be avoided for simpler solutions, based on dynamic changes over the class instance.\n\nというふうに書いてあるし、そう気軽に使っていいものではないことがわかる。(というか、使えないだろう。)\n\nで、エキパイのこのチャプタの最後にクラスを拡張するパッチの実装があるのでほぼ丸コピ。\n\n```python\ndef enhancer_1(cls):\n  cls.contracted_name = ''''.join(\n      l for l in cls.__name__ if l.isupper()\n  )\n\n\ndef enhancer_2(cls):\n    def logger(func):\n        def wrapper(*args, **kwargs):\n            print(''logging!'')\n            return func(*args, **kwargs)\n        return wrapper\n    for el in dir(cls):\n        if el.startswith(''_''):\n            continue\n        v = getattr(cls, el)\n        if not hasattr(v, ''__func__''):\n            continue\n        setattr(cls, el, logger(v))\n\n\ndef enhance(cls, *enhancers):\n    for e in enhancers:\n        e(cls)\n\n\nclass ThisIsMyClass(object):\n    def hi(self):\n        return ''hi''\n\n\nenhance(ThisIsMyClass, enhancer_1, enhancer_2)\nins = ThisIsMyClass()\nassert ins.hi() == ''hi''\nassert ins.__class__.contracted_name == ''TIMC''\n```\n\nなお、メタプログラミングを使うべき時が来、適切に使える時が来るのかガチ不明。','\n',char(10)),1,'2016-02-26 12:32:48','2016-02-26 12:32:48');
INSERT INTO articles VALUES(4,'Gyazo APIのクライアントを雑に作った',replace('Gyazo APIが非常にシンプルなため本当にシンプルな面白みのない実装になりました。\n\n[pypi](https://pypi.python.org/pypi/pyazo)\n\n[github](https://github.com/mtwtkman/pyazo)\n\npyazoって名前は別言語でかぶってたりしてアレ感ある。\n\nところでこういう外部のAPIのテストってどうしたらいいんじゃろ','\n',char(10)),1,'2016-03-13 09:19:21','2016-03-13 09:19:21');
INSERT INTO articles VALUES(5,'V8で最適化されないjavascript',replace('[mithril](https://github.com/lhorie/mithril.js)のコードを読んでいて`for`文で`argumets`の要素をぐるぐる回しながらインデクスアクセスをして配列にデータを詰め込んでる処理が気持ち悪かったので`map`にしてプルリクしたところ、\nパフォーマンスを理由にリジェクトされました。\n\nで、そのプルリクでもらった返答にV8の最適化についてのリンクを併記してもらっていたので読むことにしました。\n\nちなみに[プルリクで修正した内容](https://github.com/lhorie/mithril.js/pull/993/commits/f384054947681d10696fcfeb2fab71f2a40dde1d)はクソ単純で\nArraylikeな`arguments`を`slice`で回すというものです。\n\n[Optimization killersのリンク](https://github.com/petkaantonov/bluebird/wiki/Optimization-killers)\n\n# Unsupported syntax\n2016/3/19現在、V8で最適化できない構文がいくつかある。\n\n- Generator functions\n- Functions that contain a for-of statement\n- Functions that contain a try-catch statement\n- Functions that contain a try-finally statement\n- Functions that contain a compound let assignment\n- Functions that contain a compound const assignment\n- Functions that contain object literals that contain __proto__, or get or set declarations.\n\n`try`文ダメってキツそう。あと`for-of`が最適化されないのもつらい。まあ`for-of`が最適化されるならそっち使うよな。\n\ngeneratorもダメとは…こう見ると単純にES2015以降に対応しきれていないだけという感じか。\n\nあとは↓の場合もダメっぽい\n\n- Functions that contain a debugger statement\n- Functions that call literally eval()\n- Functions that contain a with statement\n\nVBAみたいで悔しい思いをしそうな`with`を使うことはない気がするけど、`eval`や`with`を最適化ができない理由はスコープの判定ができないからとのことらしい。(曖昧)\n\nで、プロダクトコードで例外処理を避けるわけにもいかんということでワークアラウンドなコード例が書いてあったのでそのまま引用。\n\n```javascript\nvar errorObject = {value: null};\nfunction tryCatch(fn, ctx, args) {\n    try {\n        return fn.apply(ctx, args);\n    }\n    catch(e) {\n        errorObject.value = e;\n        return errorObject;\n    }\n}\n\nvar result = tryCatch(mightThrow, void 0, [1,2,3]);\n//Unambiguously tells whether the call threw\nif(result === errorObject) {\n    var error = errorObject.value;\n}\nelse {\n    //result is the returned value\n}\n```\n\nエラーハンドリングは独立した最小限の関数に切り出すのが良いらしい。\nそうすれば最適化されない範囲が最小限になるということだ。\n\n\n# Managing `arguments`\n`arguments`は最適化を阻害する多数の原因になりうるやつだそうだ。\n\n## 1. sloppyモード(=strictモードじゃないやつ)で`arguments`を評価しながら定義済みの引数に再代入する場合\n何言ってんだ？？？？例を見てみよう\n\n```javascript\nfunction defaultArgsReassign(a, b) {\n  if (arguments.length < 2) b = 5;\n}\n```\n\nとにかくこれがダメということらしい。じゃあどうしたらいいのかというと引数の値を新しい変数に保存しましょうとのこと\n\n```javascript\nfunction reAssignParam(a, b_) {\n  var b = b_;\n  //unlike b_, b can safely be reassigned\n  if (arguments.length < 2) b = 5;\n}\n```\n\nただし、今回の場合だとただ引数が与えられているのかをチェックしているだけなので下記のように書くのがいいっぽい。\n\n```javascript\nfunction reAssignParam(a, b) {\n  if (b === void 0) b = 5;\n}\n```\n\nまあでもおとなしく端からstrictモードにしておけば考える必要のない問題ですね。\n\n## 2. `arguments`漏れ\n```javascript\nfunction leaksArguments1() {\n  return arguments;\n}\n\nfunction leaksArguments2() {\n  var args = [].slice.call(arguments);\n}\n\nfunction leaksArguments3() {\n  var a = arguments;\n  return function() {\n      return a;\n  };\n}\n```\n\n今回のプルリクで指摘されたのが`leaksArguments2`と同じケースだった。`arguments`はどこにも漏らしたり渡したりしてはいけないらしい。\n\nつまり`slice.call`や`map`の引数に渡すのはご法度いうわけだ。対処法は以下(mithrilの`m()`でまさに下の実装になっていた)\n\n```javascript\nfunction doesntLeakArguments() {\n                  //.length is just an integer, this doesn''t leak\n                  //the arguments object itself\n  var args = new Array(arguments.length);\n  for(var i = 0; i < args.length; ++i) {\n              //i is always valid index in the arguments object\n      args[i] = arguments[i];\n  }\n  return args;\n}\n```\n\n## 3. `arguments`への代入\nこんなことする必要性がないと思うけど、これも例によってsloppyモードの時だけ。\n\n```javascript\nfunction assignToArguments() {\n  arguments = 3;\n  return arguments;\n}\n```\n\n## 結局のところ`arguments`はどうやったら安全に扱えるのか\n以下を厳守すればok\n\n- `arguments.length`使おう。\n- 適切なインデクスアクセスで`arguments`の要素を取得する。で、そいつは外に出さない。\n- `argumets`を**絶対に**直接扱わない。`.length`やインデクスアクセスは`arguments`そのものじゃないからおk。\n- **厳密に言えば**`fn.apply(y, arguments)`はおk。他はいかなる場合もダメ。例えば`.slice`とか。 `Function#apply`だけが特別。\n- `Function#apply`を使って関数のプロパティを追加するときと`Function#bind`で隠れクラスができてしまうような場合に気をつける。\n\n\n# Switch-case\n`switch`文は`case`の節が128を超えると最適化がされなくなる。なので`if-else`使おう。\n\n# For-in\n幾つかの場合で最適化を妨げることになる。\n\n## 1. キーがローカル変数でない場合\n```javascript\nfunction nonLocalKey1() {\n  var obj = {}\n  for(var key in obj);\n  return function() {\n      return key;\n  };\n}\n\nvar key;\nfunction nonLocalKey2() {\n  var obj = {}\n  for(key in obj);\n}\n```\n\nそもそもオブジェクトのキーは上のスコープから参照できない。純粋にローカルスコープの変数でないとダメ。\n\n## 2. イテレートできるようなオブジェクトは''simple enumerable''ではない\n### `hash table mode`(あるいは`normalized objects`, `dictionary mode`)のオブジェクトは''simple enumerable''ではない。\n\n```javascript\nfunction hashTableIteration() {\n  var hashTable = {"-": 3};\n  for(var key in hashTable);\n}\n```\n\nこれわかりづらいのだけど、コンストラクタ外で動的に`hash table mode`のオブジェクトを作るのがよくないらしい。\n\nオブジェクトが`hash table mode`になっているかはコード内に`console.log(%HasFastProperties(obj))`を仕込んでnodeのオプションに`--allow-natives-syntax`を指定してやればいいらしい。\n\n\n### プロトタイプチェインで定義されたオブジェクトがenumerableなプロパティを持っている\n\n```javascript\nObject.prototype.fn = function() {};\n```\n\nプロトタイプチェインで追加した値は`for-in`文を含んでしまうらしい。\n\n`Object.defineProperty`を使えばそれは避けられるらしい。慣れていないと難しい話だ。\n\n### 配列のインデクスを持っている\nこれは結構やりがちかもしれない\n\n```javascript\nfunction iteratesOverArray() {\n  var arr = [1, 2, 3];\n  for (var index in arr) {\n\n  }\n}\n```\n\nそもそも`for-in`は`for`より遅いらしい。なおかつ`for-in`を含む関数は含んでいるというそれだけで関数全体の最適化がなされない。\n\nこれらの問題に対する処置としてキー名のリストを作ってしまえということだ。\n\n```javascript\nfunction inheritedKeys(obj) {\n  var ret = [];\n  for(var key in obj) {\n      ret.push(key);\n  }\n  return ret;\n}\n```\n\nまじかよ\n\n\n# 無限ループと曖昧な脱出の条件\n必ず一回はループを通るなら`do-while`使おう。あとはまあロジックを踏まえて適切にexit仕掛けようね。ということらしい。\n\n現場からは以上です。','\n',char(10)),1,'2016-03-19 21:52:40','2016-03-19 21:52:40');
INSERT INTO articles VALUES(6,'shellのパイプをpythonで実装',replace('なんかふとできるかなと思って試してみたところ以下のような感じになりました。\012\012```python\012class Pipable:\012    def __init__(self, cmd):\012        if callable(cmd):\012            self.cmd = cmd\012        else:\012            raise ValueError\012\012    def __ror__(self, other):\012        return self.cmd(other)\012\012    def __call__(self, *args):\012        return self.cmd(*args)\012\012\012def cat(f):\012    with open(f) as fp:\012        data = fp.read()\012    return data\012\012\012p1 = Pipable(cat)\012p2 = Pipable(lambda x: x.upper())\012p3 = Pipable(lambda x: ''-''.join(x))\012\012\012assert p1(''hoge.txt'') == ''neko\n''\012assert p1(''hoge.txt'') | p2 == ''NEKO\n''\012assert p1(''hoge.txt'') | p2 | p3 == ''N-E-K-O-\n''\012```\012\012要は`p3(p2(p1(''hoge.txt'')))`という状態にしてやればいいので(関数合成というやつ？)`__ror__`で左側の処理の結果を受け取るようにしました。\012\012実用性皆無マンです。','\012',char(10)),1,'2016-03-21 21:34:50','2016-03-21 21:34:50');
INSERT INTO articles VALUES(7,'鉄道指向プログラミングをpythonで',replace('[Railway oriented programming](http://fsharpforfunandprofit.com/posts/recipe-part2/)を参考にpythonでも鉄道指向プログラミングを実装してみます。\n\nF#全くわらかないけど、どうやら[判別共用体](https://msdn.microsoft.com/ja-jp/library/dd233226.aspx)というやつで処理結果の型を持ち回るということらしいので、そんな風に書いてみます。\n\n```python\nfrom functools import partial\n\n\nclass TSuccess:\n    def __init__(self, result):\n        self.result = result\n\n    def __call__(self):\n        return self.result\n\n\nclass TFailure:\n    def __init__(self, msg):\n        self.msg = msg\n\n    def __call__(self):\n        return lambda : self.msg\n\n\ndef bind(switch_func, two_track_input):\n    if isinstance(two_track_input, TSuccess):\n        return switch_func(two_track_input())\n    elif isinstance(two_track_input, TFailure):\n        return two_track_input\n\n\ndef validate1(inp):\n    if inp.name == '''':\n        return TFailure(''input name.'')\n    else:\n        return TSuccess(inp)\n\n\ndef validate2(inp):\n    if len(inp.name) > 50:\n        return TFailure(''name length must be less than 50.'')\n    else:\n        return TSuccess(inp)\n\n\ndef validate3(inp):\n    if inp.email == '''':\n        return TFailure(''input email.'')\n    else:\n        return TSuccess(inp)\n\n\nclass Input:\n    def __init__(self, name, email):\n        self._name = name\n        self._email = email\n\n    @property\n    def name(self):\n        return self._name\n\n    @property\n    def email(self):\n        return self._email\n\n    def __call__(self):\n        return ''Success name={}, email={}''.format(self._name, self._email)\n\n\ndef combined_validation(inp):\n    result1 = validate1(inp)\n    result2 = bind(validate2, result1)\n    result3 = bind(validate3, result2)\n    return result3()()\n\n\nassert combined_validation(Input(name='''', email='''')) == ''input name.''\nassert combined_validation(Input(name=''neko'', email='''')) == ''input email.''\nassert combined_validation(Input(name=''neko'', email=''meow'')) == ''Success name=neko, email=meow''\n```\n\nF#では`Result`という判別共用体に`Success`と`Failure`を持っていて、型によってディスパッチするみたいですが、pythonでこれを実現する方法がわからなかった。\n\nというか、これっていわゆるパターンマッチだと思うのでまあそれができればいいかということで`bind`で全てを丸く収めた感があります。','\n',char(10)),1,'2016-04-14 22:59:22','2016-04-14 22:59:22');
INSERT INTO articles VALUES(8,'モジュールグローバルよりクラス変数の方がパフォーマンス的に有利',replace('[falcon](http://falconframework.org/)のソース読んでたら[こんなの](https://github.com/falconry/falcon/blob/50fec0fd6dc6e0019099f11a001097e1baccc9ee/falcon/api.py#L128-L135)があった。\n\n```python\n...\n# PERF(kgriffs): Reference via self since that is faster than\n# module global...\n_BODILESS_STATUS_CODES = set([\n    status.HTTP_100,\n    status.HTTP_101,\n    status.HTTP_204,\n    status.HTTP_304\n])\n...\n```\n\nモジュールグローバルのインポートよりもクラス変数のアクセスの方が速いということらしい。\n\nパス探索やらのプロセスがなくなるんだから当たり前だと思うけどどの程度差があるのか気になったのでプロファイルとってみた。\n\n\n`module.py`\n\n```python\nvar = ''I am module global.''\n```\n\n`test.py`\n\n```python\nimport cProfile\n\n\nTRIAL = 100000\n\n\nclass A:\n    var = ''I am class variable''\n\n\ndef test_module_global():\n    for x in range(TRIAL):\n        from mod import var\n\n\ndef test_class_variable():\n    for x in range(TRIAL):\n        a = A()\n        a.var\n\n\nif __name__ == ''__main__'':\n    cProfile.run(''test_module_global()'')\n    cProfile.run(''test_class_variable()'')\n\n```\n\n10万回参照するということがあり得るのかわからないけど、試行回数は10万回とする。\n\n結果から言うと\n\nモジュールグローバルのインポートは\n> 200161 function calls (200160 primitive calls) in 0.185 seconds\n\nクラス変数のアクセスはインスタンスを作るのを含めても\n> 4 function calls in 0.016 seconds\n\nだった。\n\nまあ圧倒的にクラス変数の方が速い。\n\nけどもこれ別モジュールからこのクラスをインポートして使うとかだと大してコスト変わらん気がする。\n\n`falcon.API` は基本的にアプリケーションを実行するためのインスタンスを作るのが目的のオブジェクトなんだろうけどどうせインポートするしなぁ。謎','\n',char(10)),1,'2016-05-05 12:31:24','2016-05-05 12:31:24');
INSERT INTO articles VALUES(9,'ES6で書いたコードをkarma+webpackでテスト',replace('`webpack.config.js`がそのまま使えるのでES6向けの設定が非常に楽でした。その割には`karma webpack es6`とかでググっても情報が全然なくて悲しい。\n\n前準備として`npm i -D karam-webpack`をしておきます。\n\n```\n// karama.conf.js\nvar webpackConfig = require(''./webpack.config.js'');\n\nmodule.exports = function(config) {\n  config.set({\n    basePath: '''',\n    frameworks: [''jasmine''],\n    files: [\n      ''src/tests/**/*Spec.js''\n    ],\n    exclude: [],\n    preprocessors: {\n      ''src/**/*.js'': [''webpack''],\n      ''src/tests/**/*Spec.js'': [''webpack'']\n    },\n    webpack: webpackConfig,\n    reporters: [''progress''],\n    port: 9876,\n    colors: true,\n    logLevel: config.LOG_INFO,\n    autoWatch: true,\n    browsers: [''PhantomJS''],\n    singleRun: false,\n    concurrency: Infinity\n  })\n}\n```\n\nこんな設定ファイルを用意して`karma test`を実行するだけでES6で書いたコードのテストが実行できます。\n`webpack.config.js`のエントリポイントをそのまま使っているのでインポートのパス探索を考える必要がないのが良いと思います。\n\n`browserify`の方が楽かと思ったけどこれはこれで問題ないかと。','\n',char(10)),1,'2016-07-29 23:50:20','2016-07-29 23:50:20');
INSERT INTO articles VALUES(10,'mithriljsのコードを読む',replace('[mithriljs](https://github.com/lhorie/mithril.js/tree/0159cd667ad85cd82d92fcb31a33f75be6539f6d)のコード読む。\n\n現時点で`v0.2.5`だけど、コアな部分はそう変わらんだろう。コアなというのは、つまり`m.mount`とか。\n\nというわけで`mithril`がレンダリングする`m.mount`から読むことにしよう。(2000行程度なら単体のファイルは読むのが比較的楽ということが知られています)\n\n[ここ](https://github.com/lhorie/mithril.js/blob/0159cd667ad85cd82d92fcb31a33f75be6539f6d/mithril.js#L1475)\n```js\nm.mount = m.module = function (root, component) {\n  if (!root) {\n    throw new Error("Please ensure the DOM element exists before " +\n      "rendering a template into it.")\n  }\n  var index = roots.indexOf(root)\n  if (index < 0) index = roots.length\n  var isPrevented = false\n  var event = {\n    preventDefault: function () {\n      isPrevented = true\n      computePreRedrawHook = computePostRedrawHook = null\n    }\n  }\n  forEach(unloaders, function (unloader) {\n    unloader.handler.call(unloader.controller, event)\n    unloader.controller.onunload = null\n  })\n  if (isPrevented) {\n    forEach(unloaders, function (unloader) {\n      unloader.controller.onunload = unloader.handler\n    })\n  } else {\n    unloaders = []\n  }\n  if (controllers[index] && isFunction(controllers[index].onunload)) {\n    controllers[index].onunload(event)\n  }\n  return checkPrevented(component, root, index, isPrevented)\n}\n```\n`m.mount`がやってることはUnloadableControllerな場合に`unloader`のイベントハンドラを登録しているというだけ。\n注意を払わないといけないのは`event`内で定義されている`preventDefault`関数の中で`isPrevented`を巻き上げてる点だろうか。\n\nまあ、大したことはやっていないので`checkPrevented`を見てみる。\n\n[ここやで](https://github.com/lhorie/mithril.js/blob/0159cd667ad85cd82d92fcb31a33f75be6539f6d/mithril.js#L1437)\n\n```js\nfunction checkPrevented(component, root, index, isPrevented) {\n  if (!isPrevented) {\n    m.redraw.strategy("all")\n    m.startComputation()\n    roots[index] = root\n    var currentComponent\n    if (component) {\n      currentComponent = topComponent = component\n    } else {\n      currentComponent = topComponent = component = {controller: noop}\n    }\n    var controller = new (component.controller || noop)()\n    // controllers may call m.mount recursively (via m.route redirects,\n    // for example)\n    // 訳: controllersはm.mountを再帰的に呼び出し得る。(例えば、m.routeのリダイレクトを通じてとか)\n    // this conditional ensures only the last recursive m.mount call is\n    // applied\n    // 訳: この条件式はm.mountが呼び出す最後の再帰が適用されてるかを確かめてるだけ。\n    if (currentComponent === topComponent) {\n      controllers[index] = controller\n      components[index] = component\n    }\n    endFirstComputation()\n    if (component === null) {\n      removeRootElement(root, index)\n    }\n    return controllers[index]\n  } else {\n    if (component == null) {\n      removeRootElement(root, index)\n    }\n    if (previousRoute) {\n      currentRoute = previousRoute\n    }\n  }\n}\n```\n`isPrevented`でない場合、`m.redraw.strategy`は[`m.prop`](https://github.com/lhorie/mithril.js/blob/0159cd667ad85cd82d92fcb31a33f75be6539f6d/mithril.js#L1553)だから、`all`を初期値としてセット。\n`startComputation`を呼び出しているのでここでredrawのカウンタが始まる。\n\nComponentを作ってからControllerをインスタンス化してる。`currentComponent === topComponent`はよくわからん。`currentComponent = topComponent = ほにゃらら`って必ずどちらも通る分岐に書いてあるし、常にtrueになるんでは？\n\nで、[`endFirstComputation`](https://github.com/lhorie/mithril.js/blob/0159cd667ad85cd82d92fcb31a33f75be6539f6d/mithril.js#L1578)は`endComputation`に読み替えていい。\n\nここでこのDOMの描画のカウンタが終了した。初回の描画はとにかくComponentをインスタンス化するだけのようだ。詳しい描画処理については別の部分を見ないとダメみたいだ。(`endComputation`の`m.redraw`呼び出しなんだけど)\n\nあと、どうやら`m.mount(document.body)`が合法という事らしい。\n\n[`removeRootElement`](https://github.com/lhorie/mithril.js/blob/0159cd667ad85cd82d92fcb31a33f75be6539f6d/mithril.js#L1512)はメソッド名通り、DOM要素からControllerやComponent、仮想DOMのCacheなどを削除している。\n\nところで、描画の処理が全然わからないので続く。','\n',char(10)),1,'2016-08-22 20:54:01','2016-08-22 20:54:01');
INSERT INTO articles VALUES(11,'mithriljsのコードを読む(2)',replace('さて、前回は`m.mount`の内容を見たところ、描画についてはわからなかった。\n\n`endComputation`内で呼んでいる`m.redraw`の正体を暴こう。\n\n[ここ](https://github.com/lhorie/mithril.js/blob/0159cd667ad85cd82d92fcb31a33f75be6539f6d/mithril.js#L1522)\n```javascript\nm.redraw = function (force) {\n  if (redrawing) return\n  redrawing = true\n  if (force) forcing = true\n  try {\n    // lastRedrawId is a positive number if a second redraw is requested\n    // before the next animation frame\n    // lastRedrawId is null if it''s the first redraw and not an event\n    // handler\n    // 超意訳: lastRedrawIdはフレームの更新が必要な時に正の数値を持つ。\n    if (lastRedrawId && !force) {\n      // when setTimeout: only reschedule redraw if time between now\n      // and previous redraw is bigger than a frame, otherwise keep\n      // currently scheduled timeout\n      // when rAF: always reschedule redraw\n      // 超意訳: フレームの更新時間が規定を超えていれば更新する\n      if ($requestAnimationFrame === global.requestAnimationFrame ||\n          new Date() - lastRedrawCallTime > FRAME_BUDGET) {\n        if (lastRedrawId > 0) $cancelAnimationFrame(lastRedrawId)\n        lastRedrawId = $requestAnimationFrame(redraw, FRAME_BUDGET)\n      }\n    } else {\n      redraw()\n      lastRedrawId = $requestAnimationFrame(function () {\n        lastRedrawId = null\n      }, FRAME_BUDGET)\n    }\n  } finally {\n    redrawing = forcing = false\n  }\n}\n```\nここではフレームの更新有無を判定している。再描画処理の本体は`redraw`という内部関数のようだ。\n\n[ここ](https://github.com/lhorie/mithril.js/blob/0159cd667ad85cd82d92fcb31a33f75be6539f6d/mithril.js#L1554)\n```javascript\nfunction redraw() {\n  if (computePreRedrawHook) {\n    computePreRedrawHook()\n    computePreRedrawHook = null\n  }\n  forEach(roots, function (root, i) {\n    var component = components[i]\n    if (controllers[i]) {\n      var args = [controllers[i]]\n      m.render(root,\n        component.view ? component.view(controllers[i], args) : "")\n    }\n  })\n  // after rendering within a routed context, we need to scroll back to\n  // the top, and fetch the document title for history.pushState\n  // 訳: routeされているコンテキスト(うまく訳せない)内での描画後、ドキュメントのトップにスクロールする必要がある。\n  //     後history.pushStateするためのドキュメントのタイトルを取得する\n  if (computePostRedrawHook) {\n    computePostRedrawHook()\n    computePostRedrawHook = null\n  }\n  lastRedrawId = null\n  lastRedrawCallTime = new Date()\n  m.redraw.strategy("diff")\n}\n```\n溜め込まれた`roots`のviewを`m.render`に渡している。いよいよ核心に迫ってきた感出てきた。\n\n`computePreRedrawHook`と`computePostRedrawHook`は訳に書いてある処理をやっているだけ。描画が終われば`m.redraw.strategy`がdiffに更新されて、差分だけの更新になるわけだ。\n\n`m.render`を見てみよう。\n\n[ここ](https://github.com/lhorie/mithril.js/blob/0159cd667ad85cd82d92fcb31a33f75be6539f6d/mithril.js#L1316)\n```javascript\nm.render = function (root, cell, forceRecreation) {\n  if (!root) {\n    throw new Error("Ensure the DOM element being passed to " +\n      "m.route/m.mount/m.render is not undefined.")\n  }\n  var configs = []\n  var id = getCellCacheKey(root)\n  var isDocumentRoot = root === $document\n  var node\n\n  if (isDocumentRoot || root === $document.documentElement) {\n    node = documentNode\n  } else {\n    node = root\n  }\n\n  if (isDocumentRoot && cell.tag !== "html") {\n    cell = {tag: "html", attrs: {}, children: cell}\n  }\n\n  if (cellCache[id] === undefined) clear(node.childNodes)\n  if (forceRecreation === true) reset(root)\n\n  cellCache[id] = build(\n    node,\n    null,\n    undefined,\n    undefined,\n    cell,\n    cellCache[id],\n    false,\n    0,\n    null,\n    undefined,\n    configs)\n\n  forEach(configs, function (config) { config() })\n}\n```\n\nmithrilでは仮想DOMをcellと呼んでいるようで、`getCellCacheKey`はキャッシュされているrootの仮想DOMのidを取得している。\n\nで、nodeはまさにDOMのノードの事(まさに本当の意味でのDOMオブジェクト)で、キャッシュされていないDOMの場合、`clear`を呼び出している。\n\n```javascript\nfunction clear(nodes, cached) {\n  for (var i = nodes.length - 1; i > -1; i--) {\n    if (nodes[i] && nodes[i].parentNode) {\n      try {\n        nodes[i].parentNode.removeChild(nodes[i])\n      } catch (e) {\n        /* eslint-disable max-len */\n        // ignore if this fails due to order of events (see\n        // http://stackoverflow.com/questions/21926083/failed-to-execute-removechild-on-node)\n        /* eslint-enable max-len */\n      }\n      cached = [].concat(cached)\n      if (cached[i]) unload(cached[i])\n    }\n  }\n  // release memory if nodes is an array. This check should fail if nodes\n  // is a NodeList (see loop above)\n  if (nodes.length) {\n    nodes.length = 0\n  }\n}\n```\n\n`clear`は一番後ろの子ノードを親から削除している。ループ処理の対象の長さを変えてしまう倫理観は別の問題として、要するにこれは子ノードを一掃するだけの関数だ。\n\n`m.render`に戻ろう。\n\nようやくたどり着いた`build`がDOM作成の本体だ。\n\nこれがまたしんどそうなので次回','\n',char(10)),1,'2016-08-24 21:42:14','2016-08-24 21:42:14');
INSERT INTO articles VALUES(12,'mithriljsのコードを読む(3)',replace('`build`の中身読むぞ〜〜〜〜\n\n[ここ](https://github.com/lhorie/mithril.js/blob/0159cd667ad85cd82d92fcb31a33f75be6539f6d/mithril.js#L916)\n\nまず長いコメントが目を引くのでそれを片付ける。\n```javascript\nfunction build(\n  parentElement,\n  parentTag,\n  parentCache,\n  parentIndex,\n  data,\n  cached,\n  shouldReattach,\n  index,\n  editable,\n  namespace,\n  configs\n) {\n  /*\n   * `build` is a recursive function that manages creation/diffing/removal\n   * of DOM elements based on comparison between `data` and `cached` the\n   * diff algorithm can be summarized as this:\n   *\n   * 1 - compare `data` and `cached`\n   * 2 - if they are different, copy `data` to `cached` and update the DOM\n   *     based on what the difference is\n   * 3 - recursively apply this algorithm for every array and for the\n   *     children of every virtual element\n```\n\nアルゴリズムは以下の通り。\n\n1. `data`と`cached`を比較する\n2. 差分があれば`cached`に`data`をコピーして差分に基づいた更新をDOMに対して行う\n3. 全ての`data`の配列と仮想要素の子に対して上記工程を全て再帰的に適用する\n\nなかなかシンプルだ。そして、差分産出の要となる`data`と`cached`についての説明が続く。\n```javascript\n   * The `cached` data structure is essentially the same as the previous\n   * redraw''s `data` data structure, with a few additions:\n   * - `cached` always has a property called `nodes`, which is a list of\n   *    DOM elements that correspond to the data represented by the\n   *    respective virtual element\n   * - in order to support attaching `nodes` as a property of `cached`,\n   *    `cached` is *always* a non-primitive object, i.e. if the data was\n   *    a string, then cached is a String instance. If data was `null` or\n   *    `undefined`, cached is `new String("")`\n   * - `cached also has a `configContext` property, which is the state\n   *    storage object exposed by config(element, isInitialized, context)\n   * - when `cached` is an Object, it represents a virtual element; when\n   *    it''s an Array, it represents a list of elements; when it''s a\n   *    String, Number or Boolean, it represents a text node\n```\n\n`cached`は前回再描画した`data`のデータ構造と本質的には同じデータ構造である。以下補足。\n- `cached`は常に`nodes`と呼ばれるプロパティを持つ。`nodes`はそれぞれの仮想要素に対応するDOM要素のリストである。\n- `cached`のプロパティとして`nodes`をくっつけられるように`cached`は*常に*プリミティブでないオブジェクトである。(例えば文字列データはcachedにおいてはString型となる。`null`や`undefined`であればcachedは`new String('''')`とする)\n- `cached`は`configContext`プロパティも持っている。これは`config`によって作成された状態を保持するためのものである。\n- `cached`がObject型である場合、仮想要素を表している。Array型だった場合は要素のリストであり、String, Number, Boolean型の場合はテキストノードとなる。\n\nつまり、`cached`は純粋なjavascriptの型ではなくDOMオブジェクトとして子ノードを持ちうる状態であることらしい。\n\n以降は残りの引数についてのコメント。\n```javascript\n   * `parentElement` is a DOM element used for W3C DOM API calls\n   * `parentTag` is only used for handling a corner case for textarea\n   * values\n   * `parentCache` is used to remove nodes in some multi-node cases\n   * `parentIndex` and `index` are used to figure out the offset of nodes.\n   * They''re artifacts from before arrays started being flattened and are\n   * likely refactorable\n   * `data` and `cached` are, respectively, the new and old nodes being\n   * diffed\n   * `shouldReattach` is a flag indicating whether a parent node was\n   * recreated (if so, and if this node is reused, then this node must\n   * reattach itself to the new parent)\n   * `editable` is a flag that indicates whether an ancestor is\n   * contenteditable\n   * `namespace` indicates the closest HTML namespace as it cascades down\n   * from an ancestor\n   * `configs` is a list of config functions to run after the topmost\n   * `build` call finishes running\n   *\n   * there''s logic that relies on the assumption that null and undefined\n   * data are equivalent to empty strings\n   * - this prevents lifecycle surprises from procedural helpers that mix\n   *   implicit and explicit return statements (e.g.\n   *   function foo() {if (cond) return m("div")}\n   * - it simplifies diffing code\n   */\n```\n| 引数 | 説明 |\n|------|------|\n|parentElement|W3C DOM APIが呼んでいるDOM要素|\n|parentTag|textareaの値の処理の場合にのみ使われる|\n|parentCache|複数のノードが存在する場合にノードを削除するために使われる|\n|parentIndex, index|ノードのオフセットを算出するために使用される|\n|data|差分算出の新しい方|\n|cached|差分算出の古い方|\n|shouldReattach|親ノードを再作成するかしないかを判定するフラグ|\n|editable|祖先の要素がcontenteditableかどうかを判定するフラグ|\n|namespace|直近のHTML名前空間(祖先からカスケードダウンしてくる)|\n|configs|buildの実行が終わった後に動くconfig関数のリスト|\n\nで、この処理でやってることを上から見ていくと`data`がtoStringできるかどうかを判定し、cacheを作り、`data`のデータ型によって処理を分けている。\n\n```javascript\n  data = dataToString(data)\n  if (data.subtree === "retain") return cached\n  cached = makeCache(data, cached, index, parentIndex, parentCache)\n\n  if (isArray(data)) {\n    return buildArray(\n      data,\n      cached,\n      parentElement,\n      index,\n      parentTag,\n      shouldReattach,\n      editable,\n      namespace,\n      configs)\n  } else if (data != null && isObject(data)) {\n    return buildObject(\n      data,\n      cached,\n      editable,\n      parentElement,\n      index,\n      shouldReattach,\n      namespace,\n      configs)\n  } else if (!isFunction(data)) {\n    return handleTextNode(\n      cached,\n      data,\n      index,\n      parentElement,\n      shouldReattach,\n      editable,\n      parentTag)\n  } else {\n    return cached\n  }\n}\n```\n\n- Arrayだったら`buildArray`\n- Objectだったら`buildObject`\n- 上のデータ型でもFunctionでもなかったら`handleTextNode`\n- それでも条件が異なればcachedを返却\n\nとそれぞれ分岐している。\n\n`buildArray`は何をしているんだろう。[ここ](https://github.com/lhorie/mithril.js/blob/0159cd667ad85cd82d92fcb31a33f75be6539f6d/mithril.js#L584)\n\n```javascript\nfunction buildArray(\n  data,\n  cached,\n  parentElement,\n  index,\n  parentTag,\n  shouldReattach,\n  editable,\n  namespace,\n  configs\n) {\n  data = flatten(data)\n  var nodes = []\n  var intact = cached.length === data.length\n  var subArrayCount = 0\n```\n\n`key`を使うことで余計な要素の再作成を避けている。アルゴリズムはこうだ。\n\n```javascript\n  // keys algorithm: sort elements without recreating them if keys are\n  // present\n  //\n  // 1) create a map of all existing keys, and mark all for deletion\n  // 2) add new keys to map and mark them for addition\n  // 3) if key exists in new list, change action from deletion to a move\n  // 4) for each key, handle its corresponding action as marked in\n  //    previous steps\n```\n\n1. 存在している全てのkeysのマップを作成し、削除処理のためにマークする。\n2. マップに新しいkeysを追加し、それらを追加処理のためにマークする。\n3. keyが新しいリストに存在しているなら、削除処理から移動へとアクションを変更する。\n4. それぞれのkeyについて、ステップ3で決められたマークに対応するアクションを処理する。\n\nわかるようでイマイチわからないので大人しくコードを読み進める。\n\n```javascript\n  var existing = {}\n  var shouldMaintainIdentities = false\n\n  forKeys(cached, function (attrs, i) {\n    shouldMaintainIdentities = true\n    existing[cached[i].attrs.key] = {action: DELETION, index: i}\n  })\n```\n\nなるほど、`cached`をループして、アクションを`DELTION`に設定している。ステップ1だ。\n\n```javascript\n  buildArrayKeys(data)\n```\n\n今度は`buildArrayKeys`ですか(;´Д`)\n```javascript\nfunction buildArrayKeys(data) {\n  var guid = 0\n  forKeys(data, function () {\n    forEach(data, function (attrs) {\n      if ((attrs = attrs && attrs.attrs) && attrs.key == null) {\n        attrs.key = "__mithril__" + guid++\n      }\n    })\n    return 1\n  })\n}\n```\n\n`data`の属性をループして`key`が設定されていなければ識別子として設定している。ステップ2だ。\n\nで、`cached`が存在してさえいれば`diffKeys`を呼んで終わり。\n\n```javascript\n  if (shouldMaintainIdentities) {\n    cached = diffKeys(data, cached, existing, parentElement)\n  }\n  // end key algorithm\n```\n\nだるい\n\n```javascript\nfunction diffKeys(data, cached, existing, parentElement) {\n  var keysDiffer = data.length !== cached.length\n\n  if (!keysDiffer) {\n    forKeys(data, function (attrs, i) {\n      var cachedCell = cached[i]\n      return keysDiffer = cachedCell &&\n        cachedCell.attrs &&\n        cachedCell.attrs.key !== attrs.key\n    })\n  }\n\n  if (keysDiffer) {\n    return handleKeysDiffer(data, existing, cached, parentElement)\n  } else {\n    return cached\n  }\n}\n```\n\n`data`と`cached`の要素数が同じであれば`cached`と`data`の`key`が違うかどうかを判定しcachedをそのまま返却。\n\nそうでなければ`handleKeysDiffer`を呼び出して返却値をそのまま返却。しんどい\n\n```javascript\nfunction handleKeysDiffer(data, existing, cached, parentElement) {\n  forKeys(data, function (key, i) {\n    existing[key = key.key] = existing[key] ? {\n      action: MOVE,\n      index: i,\n      from: existing[key].index,\n      element: cached.nodes[existing[key].index] ||\n        $document.createElement("div")\n    } : {action: INSERTION, index: i}\n  })\n```\n\n`data`の`key`がすでに存在している場合は`MOVE`のアクションが与えられている。`element`が`cached`の`nodes`が持つ要素か、新規作成のdiv要素になっている。\n\n`data`の`key`がまだ存在していなければ`INSERTION`のアクションが与えられている。\n\nで、actionsにexistingのプロパティの値を溜め込んで\n\n```javascript\n  var actions = []\n  for (var prop in existing) {\n    if (hasOwn.call(existing, prop)) {\n      actions.push(existing[prop])\n    }\n  }\n```\n\nアクションごとに処理してる。\n\n```javascript\n  var changes = actions.sort(sortChanges)\n  var newCached = new Array(cached.length)\n\n  newCached.nodes = cached.nodes.slice()\n\n  forEach(changes, function (change) {\n    var index = change.index\n    if (change.action === DELETION) {\n      clear(cached[index].nodes, cached[index])\n      newCached.splice(index, 1)\n    }\n    if (change.action === INSERTION) {\n      var dummy = $document.createElement("div")\n      dummy.key = data[index].attrs.key\n      insertNode(parentElement, dummy, index)\n      newCached.splice(index, 0, {\n        attrs: {key: data[index].attrs.key},\n        nodes: [dummy]\n      })\n      newCached.nodes[index] = dummy\n    }\n\n    if (change.action === MOVE) {\n      var changeElement = change.element\n      var maybeChanged = parentElement.childNodes[index]\n      if (maybeChanged !== changeElement && changeElement !== null) {\n        parentElement.insertBefore(changeElement,\n          maybeChanged || null)\n      }\n      newCached[index] = cached[change.from]\n      newCached.nodes[index] = changeElement\n    }\n  })\n```\n\n大して難しいことしてない。`newCached`で`cache`を更新し、アクションごとに削除、追加、移動をしている。\n\nで、戻ってくる。\n\n```javascript\n  var cacheCount = 0\n  // faster explicitly written\n  for (var i = 0, len = data.length; i < len; i++) {\n    // diff each item in the array\n    var item = build(\n      parentElement,\n      parentTag,\n      cached,\n      index,\n      data[i],\n      cached[cacheCount],\n      shouldReattach,\n      index + subArrayCount || subArrayCount,\n      editable,\n      namespace,\n      configs)\n\n    if (item !== undefined) {\n      intact = intact && item.nodes.intact\n      subArrayCount += getSubArrayCount(item)\n      cached[cacheCount++] = item\n    }\n  }\n\n  if (!intact) diffArray(data, cached, nodes)\n  return cached\n}\n```\n\n`data`の要素に対して`build`を呼び出し再帰処理している。　\n\n最後の`diffArray`は`data`と`cached`の長さが異なる場合に呼ばれ、内容としては`nodes`から`cached`の要素を削除して`data`の長さに合わせている。\n\n`cached`に残っている不要な要素を削除する目的のようだ。\n\nまだ全然終わらんが、疲れたので続く','\n',char(10)),1,'2016-08-25 20:14:04','2016-08-25 20:14:04');
INSERT INTO articles VALUES(13,'mithriljsのコードを読む(4)',replace('前回は`buildArray`まで読んだ。`buildObject`から読もうではないか。\n\n[ここ](https://github.com/lhorie/mithril.js/blob/0159cd667ad85cd82d92fcb31a33f75be6539f6d/mithril.js#L831)\n\n```javascript\nfunction buildObject( // eslint-disable-line max-statements\n  data,\n  cached,\n  editable,\n  parentElement,\n  index,\n  shouldReattach,\n  namespace,\n  configs\n) {\n  var views = []\n  var controllers = []\n\n  data = markViews(data, cached, views, controllers)\n```\n\n`data`がオブジェクトの場合、つまりコンポーネントの場合は`markViews`で何かをしている。見てみる。\n\n```javascript\nfunction markViews(data, cached, views, controllers) {\n  var cachedControllers = cached && cached.controllers\n\n  while (data.view != null) {\n    data = checkView(\n      data,\n      data.view.$original || data.view,\n      cached,\n      cachedControllers,\n      controllers,\n      views)\n  }\n\n  return data\n```\n\nキャッシュされているControllerがないかを判定して`checkView`から`data`を作っている。見てみる。\n\n```javascript\nfunction checkView(\n  data,\n  view,\n  cached,\n  cachedControllers,\n  controllers,\n  views\n) {\n  var controller = getController(\n    cached.views,\n    view,\n    cachedControllers,\n    data.controller)\n\n  var key = data && data.attrs && data.attrs.key\n```\nバケツリレーで頭がフットーしそうだが、`getController`でControllerを取得しているのは明白だ。さらに、`data`の`key`を取得している。\n\nこの辺はキャッシュされている仮想DOMをアレコレするためだろう。`getController`を見てみる。\n\n```javascript\nfunction getController(views, view, cachedControllers, controller) {\n  var controllerIndex\n\n  if (m.redraw.strategy() === "diff" && views) {\n    controllerIndex = views.indexOf(view)\n  } else {\n    controllerIndex = -1\n  }\n\n  if (controllerIndex > -1) {\n    return cachedControllers[controllerIndex]\n  } else if (isFunction(controller)) {\n    return new controller()\n  } else {\n    return {}\n  }\n}\n```\n\n差分描画のフラグで且つコンポーネントが作成されていればキャッシュされているControllerを返し、そうでなければ引数の`controller`をインスタンス化するか空のオブジェクトを返す。\n\nまあその名の通りControllerを返しているだけだ。\n\n`checkView`に戻ると\n\n```javascript\n  if (pendingRequests === 0 ||\n      forcing ||\n      cachedControllers &&\n        cachedControllers.indexOf(controller) > -1) {\n    data = data.view(controller)\n  } else {\n    data = {tag: "placeholder"}\n  }\n```\n\nこのif文は再描画を行える状態かキャッシュされているControllerが存在している場合に仮想DOM(`data.view`のreturn)を`data`に再代入している。\n\n```javascript\n\n  if (data.subtree === "retain") return data\n  data.attrs = data.attrs || {}\n  data.attrs.key = key\n  updateLists(views, controllers, view, controller)\n  return data\n}\n```\n\n`data.subtree === "retain"`であれば`data`の更新は行わない。ここは[ドキュメントにひっそりと書いてある。](http://mithril.js.org/mithril.html#persisting-dom-elements-across-route-changes)\n\n概要を書くと、retainが設定されていると`router`による画面再描画時にそのDOMは再構築されずにそのまま引き継がれるというもの。\nコンポーネントを使い回す時などに設定することになる。(この文脈でコンポーネントは`data`のこと)\n\nで、コンポーネントをキャッシュしている`views`と`controllers`に作成した`view`と`controller`突っ込んでいる。\n\n`buildObject`に戻ります。\n\n```javascript\n  if (data.subtree === "retain") return cached\n```\n\n上述した通り、retainの時はコンポーネントを使い回す。\n\n```javascript\n\n  if (!data.tag && controllers.length) {\n    throw new Error("Component template must return a virtual " +\n      "element, not an array, string, etc.")\n  }\n\n  data.attrs = data.attrs || {}\n  cached.attrs = cached.attrs || {}\n\n  var dataAttrKeys = Object.keys(data.attrs)\n  var hasKeys = dataAttrKeys.length > ("key" in data.attrs ? 1 : 0)\n\n  maybeRecreateObject(data, cached, dataAttrKeys)\n```\n\nここからはconfigの設定かな。`maybeRecreateObject`を見てみる。\n\n```javascript\nfunction maybeRecreateObject(data, cached, dataAttrKeys) {\n  // if an element is different enough from the one in cache, recreate it\n  if (isDifferentEnough(data, cached, dataAttrKeys)) {\n    if (cached.nodes.length) clear(cached.nodes)\n\n    if (cached.configContext &&\n        isFunction(cached.configContext.onunload)) {\n      cached.configContext.onunload()\n    }\n\n    if (cached.controllers) {\n      forEach(cached.controllers, function (controller) {\n        if (controller.onunload) {\n          controller.onunload({preventDefault: noop})\n        }\n      })\n    }\n  }\n}\n```\n\n差分があった時に再作成するような要素だった場合に再作成している。で、`diffrent enough`であることを`isDifferentEnough`で見ている。\n\n```javascript\nfunction isDifferentEnough(data, cached, dataAttrKeys) {\n  if (data.tag !== cached.tag) return true\n\n  if (dataAttrKeys.sort().join() !==\n      Object.keys(cached.attrs).sort().join()) {\n    return true\n  }\n\n  if (data.attrs.id !== cached.attrs.id) {\n    return true\n  }\n\n  if (data.attrs.key !== cached.attrs.key) {\n    return true\n  }\n\n  if (m.redraw.strategy() === "all") {\n    return !cached.configContext || cached.configContext.retain !== true\n  }\n\n  if (m.redraw.strategy() === "diff") {\n    return cached.configContext && cached.configContext.retain === false\n  }\n\n  return false\n}\n```\n\ntrueになるのは\n- attributesのキーがキャッシュされているのと異なる時\n- attrsのidがキャッシュされているのと異なる時\n- `key`がキャッシュされているのと異なる時\n- strategyが`all`でかつ、`config`がないまたはretainが設定されていない時\n- strategyが`diff`でかつ、`config`があってretainが設定されていない時\n\nちなみに、strategyは↓の通り\n| all | デフォルトの値。redrawのタイミングで現在のDOMを捨てて全部作り直す|\n| diff | 差分があったときだけその差分更新を行う |\n| none | redrawをすっ飛ばす。何も更新はしない |\n\n`all`でかつ`config`がない時というのがピンとこないが、おそらく`config`は`redraw`のタイミングで常に呼ばれるからキャッシュ前提のためだろう。\n\n```javascript\n\n  if (!isString(data.tag)) return\n```\n\nここはどういうことだかよくわからない。`tag`が文字型でなければエラーではなく無を返す…どういうことだ…\n\n[m()ではエラーにしてるぞ?](https://github.com/lhorie/mithril.js/blob/0159cd667ad85cd82d92fcb31a33f75be6539f6d/mithril.js#L168-L171)\n\nよくわからないのでgitterで聞いてる中。\n\n```javascript\n  var isNew = cached.nodes.length === 0\n\n  namespace = getObjectNamespace(data, namespace)\n  var node\n  if (isNew) {\n    node = constructNode(data, namespace)\n```\nここでDOM作ってる。\n\n```javascript\n    // set attributes first, then create children\n    var attrs = constructAttrs(data, node, namespace, hasKeys)\n```\n\nDOMにアトリビュートをセット\n\n```javascript\n    // add the node to its parent before attaching children to it\n    insertNode(parentElement, node, index)\n```\n\n子ノードとして親要素に追加\n\n```javascript\n    var children = constructChildren(data, node, cached, editable,\n      namespace, configs)\n```\n\n子ノードを作成。この中でさらに`build`を呼んで子ノードのDOMを作成している。\n\n```javascript\n    cached = reconstructCached(\n      data,\n      attrs,\n      children,\n      node,\n      namespace,\n      views,\n      controllers)\n  } else {\n    node = buildUpdatedNode(\n      cached,\n      data,\n      editable,\n      hasKeys,\n      namespace,\n      views,\n      configs,\n      controllers)\n  }\n\n```\n\n初回の`build`であればキャッシュを作り、そうでなければ`data`の情報で`cached`を更新する。\n\n```javascript\n  // edge case: setting value on <select> doesn''t work before children\n  // exist, so set it again after children have been created/updated\n  if (data.tag === "select" && "value" in data.attrs) {\n    setAttributes(node, data.tag, {value: data.attrs.value}, {},\n      namespace)\n  }\n  if (!isNew && shouldReattach === true && node != null) {\n    insertNode(parentElement, node, index)\n  }\n\n  // The configs are called after `build` finishes running\n  scheduleConfigsToBeCalled(configs, data, node, isNew, cached)\n\n  return cached\n}\n```\nどうやらselectタグが指定されていた場合は子要素がないとうまく動かないとのことでもう一度属性の設定をしている。\n\nで、必要に応じて`node`を`index`の位置に追加して最後に`data`の`config`を`configs`に突っ込んで終了。\n\n\nとりあえずこれでおしまいなんだが、まだあるんや…','\n',char(10)),1,'2016-08-27 20:18:23','2016-08-27 20:18:23');
INSERT INTO articles VALUES(14,'pythonでカリー化',replace('やり尽くされてるだろうけどpythonでカリー化を実装してみました\n\n```\nimport functools\n\n\nclass ArgumentCountError(Exception):\n    pass\n\n\ndef curry(function):\n    name = function.__name__\n    argcount = function.__code__.co_argcount\n    varnames = function.__code__.co_varnames\n    class Factory:\n        def __init__(self, function, params=None):\n            self.function = function\n            self._params = params if params else tuple()\n\n        @property\n        def name(self):\n            return name\n\n        @property\n        def argcount(self):\n            return argcount\n\n        @property\n        def varnames(self):\n            return varnames\n\n        def __call__(self, *args):\n            params = self._params + args\n            if self.argcount < len(params):\n                raise ArgumentCountError\n            elif self.argcount == len(params):\n                return self.function(*args)\n            else:\n                return self.__class__(functools.partial(self.function, *args), params)\n\n        def __str__(self):\n            params = '', ''.join(\n                ''{}={}''.format(*x) for x in zip(self.varnames, self._params)\n            ) if self._params else ''NO PARAM SUPPLIED''\n            return ''<{}: {}>''.format(self.name, params)\n    return Factory(function)\n\n\nif __name__ == ''__main__'':\n    @curry\n    def add(x, y, z):\n        return x + y + z\n\n    assert add(1, 2, 3) == add(1, 2)(3) == add(1)(2)(3) == 6\n```\n\n特に工夫はしてないです','\n',char(10)),1,'2016-09-21 22:50:27','2016-09-21 22:50:27');
INSERT INTO articles VALUES(15,'mithirl.jsのospec使ってみる',replace('rewriteいいですね。mithrilのコードリーディングは完全に挫折したけどもうrewriteブランチを追うことにするのでいいやという感じ。\n\nrewriteブランチには[ospec](https://www.npmjs.com/package/ospec)というフルスクラッチのテストフレームワークがあってやばくなっているので見てみます。\n\n機能としては\n- テストのグループ化\n- アサーション\n- スパイ\n- `equals`, `notEquals`, `deepEquals`, `notDeepEquals`のアサーションタイプ\n- `before`/`after`/`beforeEach`/`afterEach`の各フック\n- 排他テスト(`.only`とか)\n- 非同期なテストとフック\nということで一通り必要なものは揃っている印象です。\n\n[APIも小柄です。](https://github.com/lhorie/mithril.js/tree/rewrite/ospec#api)\n\n# インストール\n`npm i ospec`\n\n# 使い方\n詳しくは[ドキュメント](https://github.com/lhorie/mithril.js/blob/rewrite/ospec/README.md)を見てください。\n\n## 基本的な使い方\n基本的な使い方は`o.spec`でテストのグループ化をして`o`でテストを作成。`o.run`でテストを実行という流れです。\n```javascript\nfunction kebabify(v) {\n  if (typeof v !== ''string'') return null;\n  return v.split('''').join(''-'');\n}\n\nvar o = require(''ospec'');\n\no.spec(''kebabify'', function() {\n  o(''return kebabed string if passed string'', function() {\n    o(kebabify(''hoge'')).equals(''h-o-g-e'');\n  })\n  o(''return null if passed not string'', function() {\n    o(kebabify(123)).equals(null);\n  })\n});\n\no.run();\n```\n\nテストが通るとアサーションの数だけが表示されます。\n> 2 assertions completed in 23ms\n\nテストが失敗するとどこで失敗したかが最低限表示されます。\n>kebabify > shoud return null if passed not string: null should equal "1-2-3"\n>\n> at /Users/boku/work/jswork/hoge/tests/one.js:13:22\n>\n>\n> 2 assertions completed in 23ms\n\n素っ気ないですね。\n\n`o.spec`はネストできます。\n\n```javascript\nfunction _anyfy(v, sign) {\n  if (typeof v !== ''string'') return null;\n  return v.split('''').join(sign);\n}\n\nfunction kebabify(v) { return _anyfy(v, ''-'') }\nfunction snakify(v) { return _anyfy(v, ''_'') }\n\nvar o = require(''ospec'');\n\no.spec(''string case'', function() {\n  o.spec(''kebabify'', function() {\n    o(''shoud return kebabed string if passed string'', function() {\n      o(kebabify(''hoge'')).equals(''h-o-g-e'');\n    })\n    o(''shoud return null if passed not string'', function() {\n      o(kebabify(123)).equals(null);\n    })\n  });\n  o.spec(''snakify'', function() {\n    o(''shoud return snaked string if passed string'', function() {\n      o(snakify(''hoge'')).equals(''h_o_g_e'');\n    })\n    o(''shoud return null if passed not string'', function() {\n      o(snakify(123)).equals(null);\n    })\n  });\n});\n\no.run();\n```\n\nまた、`bin`に`ospec`があるのでコマンドで呼び出すこともできます。コマンドで呼び出す場合は`tests/*.js`がテスト定義ファイルとみなされます。\n\n## スタブ\n`o.spy`はスタブとして利用できます。例えばコールバック関数を引数に取る関数をテストする時に利用できるわけです。\n\n```javascript\nfunction one(cb, x, y) {\n  console.log(''yeah, wow, wow, yeah'');\n  cb(x, y);\n  console.log(''oh...'');\n  cb(x, y);\n  console.log(''hey...'');\n}\n\nvar o = require(''ospec'');\n\no.spec(''one()'', function() {\n  o(''shoud work for me.'', function() {\n    var spy = o.spy();\n    one(spy, 10, 100);\n    o(spy.callCount).equals(2);\n    o(spy.args).deepEquals([10, 100]);\n  });\n});\n\no.run();\n```\n\n`o.spy`が返却するオブジェクトは`callCount`と`args`という属性を持っています。それぞれ呼ばれた回数とスタブ関数に**最後に渡された**引数の配列です。\n\n## 非同期テスト\nテストのスコープを作っている関数に引数を渡すとそれは非同期なものとみなされます。その引数はテスト完了時に必ず一度呼び出される関数です。\n\n慣例的には`done`とかつけるみたいです。\n\n```javascript\nfunction asyncFunc(cb, wait) {\n  wait = wait || 20;\n  setTimeout(cb(), wait);\n}\n\nvar o = require(''ospec'');\n\no(''setTimeout calls callback'', function(done, timeout) {\n  timeout(50);\n  asyncFunc(done, 10);\n});\n\no.run();\n```\n\nあまりいい例じゃないけど(;´Д`)\n\nちなみにデフォルトで非同期テストのタイムアウトは`20ms`とのことでこれはテストのスコープを作ってる関数の第二引数に渡す関数によって設定を変えられる。\n\nこの引数は慣例的に`timeout`と名付けるのがいいようだ。\n\n`done`が実行されれば成功してタイムアウトすると失敗とのことだけど、何度やっても成功してしまう。謎い。\n\n## フック\nテストの実行タイミングのフックがあります。\n`before`と`after`はテストグループの実行前後に一度だけ実行されるフックです。\n```javascript\nfunction id(x) { return x; }\n\nvar o = require(''ospec'');\n\no.spec(''double'', function() {\n  var acc;\n  o.before(function() {\n    acc = 0;\n  });\n  o(''should return himself.'', function() {\n    acc++;\n    o(id(acc)).equals(1);\n  });\n  o(''should return himself again.'', function() {\n    acc++\n    o(id(acc)).equals(2);\n  });\n});\n\no.run();\n```\n\nちなみにテストの実行される順番は定義順ぽいですね。\n\n`beforeEach`と`afterEach`はテストごとの実行前後のフックです。\n```javascript\nfunction id(x) { return x; }\n\nvar o = require(''ospec'');\n\no.spec(''double'', function() {\n  var acc;\n  o.beforeEach(function() {\n    acc = 0;\n  });\n  o(''should return himself.'', function() {\n    acc++;\n    o(id(acc)).equals(1);\n  });\n  o(''should return himself again.'', function() {\n    acc--;\n    o(id(acc)).equals(-1);\n  });\n});\n\no.run();\n```\n\nフックの関数に`done`を渡すと非同期なフックとなります。`done`が実行された前後にテストがはしります。\n```javascript\nfunction id(x) { return x; }\n\nvar o = require(''ospec'');\n\no.spec(''double'', function() {\n  var acc;\n  o.beforeEach(function(done) {\n    acc = 0;\n    done();\n  });\n\n  // 非同期フックが完了したらテストが実行される。\n  o(''should return himself.'', function() {\n    acc++;\n    o(id(acc)).equals(1);\n  });\n  o(''should return himself again.'', function() {\n    acc--;\n    o(id(acc)).equals(-1);\n  });\n});\n\no.run();\n```\n\nでもこれテストの結果に`beforeEach`内の非同期処理のアサーションも計上されているので微妙です。\n\n## 排他的テスト\n`o.only`によってそのテストだけを実行できます。\n```javascript\nvar o = require(''ospec'');\n\no.spec(''test'', function() {\n  o(''does not run.'', function() {\n    o(1 + 1).equals(2);\n  });\n\n  o.only(''runs'', function() {\n    o(1 * 10).equals(10);\n  });\n});\n\no.run();\n```\n\n> 1 ssertions completed in 22ms\n\n## テストの並列実行\n`o.new`することで新たな`o`のオブジェクトが生成できるので\n```javascript\nvar o = require(''o'');\nvar _o = o.new();\n...\no.run();\n_o.runt();\n```\n\nとして並列にテストが実行できます。\n\n\nまだまだ荒削りな部分がありますが、多機能になりすぎて肥大化するよりかはマシだと感じます。js界隈のテストフレームワークは覚えるのと環境を整えるが億劫というのがあるのでこのくらいシンプルでいいのではという気づきがありますね。','\n',char(10)),1,'2016-10-23 22:04:55','2016-10-23 22:04:55');
INSERT INTO articles VALUES(16,'Rust の所有権を理解する',replace('[Rustの公式ドキュメント](https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/ownership.html)をじっくり咀嚼して、Rustコードを読み書きするしかないけどまずは概念をある程度理解していないと難しいので、できるだけ仲良くなろう。\n\nそのためにも静的型付けのコンパイル言語という未経験なパラダイムということもあるので語学のためにも一言一句レベルで馬鹿丁寧にドキュメントを読み砕く。\n\n特に、所有権、借用、参照は必ず理解しておきたいのでここでみておく。\n\n# 所有権\n> Rustでは 変数束縛 はある特性を持ちます。それは、束縛されているものの「所有権を持つ」ということです。 これは束縛がスコープから外れるとき、Rustは束縛されているリソースを解放するだろうということを意味します。\n\nとある。これはつまりこういうことだ。\n\n```rust\n{\n  let hoge = "var";  // 束縛\n  println!("{}", hoge);\n}\n// スコープから外れたのでリソースを解放している。\n// そのため、hoge を参照しようとするとエラーが発生。\nprintln!("{}", hoge);\n// error[E0425]: unresolved name `hoge`\n//  --> src/main.rs:6:20\n//    |\n//  6 |     println!("{}", hoge);\n//    |                    ^^^^ unresolved name\n// error: aborting due to previous error\n```\n\n言い換えると、`letを用いた変数束縛は、束縛されたスコープ内でのみ生存可能なリソースの所有権を持つ`という特性を持つと言えそうだ。\n\n# ムーブセマンティクス\n\n> しかし、ここではもっと微妙なことがあります。それは、Rustは与えられたリソースに対する束縛が 1つだけ あるということを保証するということです。\n\nここではリソースに対する束縛、つまり所有権が1つだけであることを保証するRustについて微妙だと言っている。そして以下のような例が挙げられている。\n\n```rust\nlet v = vec![1, 2, 3];\nlet v2 = v;\nprintln!("{}", v[0]);\n// error[E0382]: use of moved value: `v`\n//  --> src/main.rs:4:20\n//    |\n//  3 |     let v2 = v;\n//    |         -- value moved here\n//  4 |     println!("{}", v[0]);\n//    |                    ^ value used here after move\n//    |\n//    = note: move occurs because `v` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n// error: aborting due to previous error\n```\nここで発生したエラーの内容はムーブされた変数`v`を使うなということである。\n\n> 所有権を何か別のものに転送するとき、参照するものを「ムーブした」と言います。\n\nこれは別に微妙でもなんでもなくて、リソースを所有できるのは常に唯一なんらかのオブジェクトであることがわかる。だから`v`が所有していたリソースの`v2`への転送(ムーブ)と表現しているわけだ。\n\nこの動作の詳細についての解説がされている。\n\n> ベクタオブジェクトは スタック に保存され、 ヒープ に保存された内容（ [1, 2, 3] ）へのポインタを含みます。v を v2 にムーブするとき、それは v2 のためにそのポインタのコピーを作ります。 それは、ヒープ上のベクタの内容へのポインタが2つあることを意味します。\n\nとのことで、確かにこれで`v`と`v2`からデータ競合が起きる可能性があるためRustがそれを排除するのは自然だ。それよりも重要なのはムーブにはポインタのコピーを伴うということだ。これは`v`が所有するリソースが保存されているアドレスと異なるアドレスに`v2`のオブジェクトが格納され、それに伴ってポインタのコピーが発生するということだろう。\n\nだとしたらムーブというのは厳密には転送ではなくてコピーということなのではないだろうか。これはコンパイラの実装を見て理解できるのかどうかも怪しいがなんとも言えない。\n\n# Copy型\n`Copy`とは\n> 所有権が他の束縛に転送されるとき、元の束縛を使うことができないということを証明しました。 しかし、この挙動を変更する トレイト があります。\n\nと言っているトレイトである。上のコード例でも`Copy`トレイトが実装されていない`Vec<i32>`型の`v`のムーブだったため`v2`にムーブした後に`v`を使うことができずにエラーが出ていた。つまり`Copy`が実装されている型であれば万事解決というわけだ。\n\n```rust\nlet v = 1;\nlet v2 = v;\nprintln!("{}", v);\n```\n\nこれは実際成功する。なぜなら`i32`は`Copy`を実装しているからだ。でもムーブが発生しているし、データの競合は起きるのでは？という疑問がある。それについては\n\n> これはちょうどムーブと同じように、 v を v2 に割り当てるとき、データのコピーが作られるということを意味します。 しかし、ムーブと違って後でまだ v を使うことができます。 これは i32 がどこか別の場所へのポインタを持たず、コピーが完全コピーだからです。\n\nということらしい。`Copy`の実装がされていればムーブは実質的に完全コピー、見かけは同じでもメモリ上は全く別物のリソースとなるため所有権は完全に独立している。そのためRustのルールから逸脱していないわけだ。\n\n> 全てのプリミティブ型は Copy トレイトを実装しているので、推測どおりそれらの所有権は「所有権ルール」に従ってはムーブしません。\n\nとある。`「所有権ルール」に従っては`という表現は何か行間がありそうだが、単純にコピーをしていると読み替えても問題はなさそうだ。なぜなら上で推察した通り、それは1つのリソースが複数所有されているわけではないからだ。\n\n# 所有権を越えて\n関数への実引数として束縛した変数を渡すとムーブが起きる。そのため、関数の呼び出し元は関数がその所有権を返すようにしてもらわねばならない。\n\n```rust\nfn foo(v1: Vec<i32>, v2: Vec<i32>) -> (Vec<i32>, Vec<i32>, i32) {\n  // `Copy`を実装しない`Vec`であるため`v`についてはムーブが起きる　\n  // そのため、持ち主に対して所有権を返す必要がある\n  (v1, v2, 42)\n}\n\nlet v1 = vec![1, 2, 3];\nlet v2 = vec![1, 2, 3];\n\nlet (v1, v2, n) = foo(v1, v2);\n```\n\nこれはなんとも手間だ。しかしこれはRustがもともと提供する借用という機能を使うことで簡単に解決できる。\n\n# 借用\n借用を用いたコードはこのようになる\n\n```rust\nfn foo(v1: &Vec<i32>, v2: &Vec<i32>) -> Vec<i32> {\n  42\n}\n\nlet v1 = vec![1, 2, 3];\nlet v2 = vec![1, 2, 3];\n\nlet n = foo(&v1, &v2);\n// コンパイルが通る\nprintln!("{}, {}", v1[0], v2[0]);\n```\n\n> 引数として Vec<i32> を使う代わりに、参照、つまり &Vec<i32> を使います。 そして、 v1 と v2 を直接渡す代わりに、 &v1 と &v2 を渡します。\n\n`&Vec<i32`を「参照」であるといい、`&v1`とすることで`v1`を直接渡さなくて済むという。つまり参照を渡すと所有権の転送であるムーブは起きないということだろう。実際にこう解説されている。\n\n> &T 型は「参照」と呼ばれ、それは、リソースを所有するのではなく、所有権を借用します。\n\n参照をムーブが起きうる箇所で渡すことを所有権の借用という。\n\n> 何かを借用した束縛はそれがスコープから外れるときにリソースを割当解除しません。 これは foo() の呼出しの後に元の束縛を再び使うことができることを意味します。\n\n所有権の項で見た通り、束縛は本来「所有権を持つ」ことを言うが、その所有権が借用だった場合はリソースが解放されずに済む。当然のことだがとても大切だ。\n\n> 参照は束縛とちょうど同じようにイミュータブルです。 これは foo() の中ではベクタは全く変更できないことを意味します。\n\nこれは安全にリソースを扱うRustの心意気という感じだが、普通に`&T`はイミュータブルなものとして扱われる。\n\nここまでの事実を整理すると借用とは\n\n- `&T`の形式で表すリソースの参照を使う\n- 所有権のムーブを回避し、束縛のスコープが終わってもリソースの解放をしない\n- 特に指定がない限りはイミュータブル\n\nということが明らかになった。\n\n# &mut参照\nミュータブルな束縛があるように、参照にもミュータブルなものがある。\n> 参照には2つ目の種類、 &mut T があります。 「ミュータブルな参照」によって借用しているリソースを変更することができるようになります。\n\n```rust\nlet mut x = 5;\n{\n  let y = &mut x;\n  *y += 1;\n}\nprintln!("{}", x);\n```\n\n> y を x へのミュータブルな参照にして、それから y の指示先に1を足します。 x も mut とマークしなければならないことに気付くでしょう。 そうしないと、イミュータブルな値へのミュータブルな借用ということになってしまい、使うことができなくなってしまいます。\n\nこれは今まで得た知識で理解できることだ。ミュータブルな参照を借用した束縛は当然値を変更できる。\n\n>   アスタリスク（ * ）を y の前に追加して、それを *y にしたことにも気付くでしょう。これは、 y が &mut 参照だからです。\n\nアスタリスクを追加する理由として`y`が&mut参照であることが述べられている。値を変更するということはその実体にアクセスして書き換えねばならない。参照の内容にアクセするにはアスタリスクを使用する必要があるということだ。\n\n> それ以外は、 &mut 参照は普通の参照と全く同じです。 しかし、2つの間には、そしてそれらがどのように相互作用するかには大きな違いが あります 。前の例で何かが怪しいと思ったかもしれません。なぜなら、 { と } を使って追加のスコープを必要とするからです。 もしそれらを削除すれば、次のようなエラーが出ます。\n\nこの理由として借用についてのルールが挙げられている。\n\n- 借用は全て所有者のスコープより長く存続してはいけない\n- 借用は`リソースに対する1つ以上の参照(&T)`または`ただ1つのミュータブルな参照(&mut T)`のどちらかを持つことがありうるが、両方同時に持つことはない\n\n1つ目の借用がスコープが終わってもなお存在してしまった場合、本来の所有者と借用しているものが同スコープに並存してしまうことになる。これはRust的にはおかしいことだ。\n\n2つ目はこれもリソースに対して所有権が1つしかあり得ないこととほぼ同じ制約だろう。\n\nいずれにせよ、Rustはデータ競合を排除している。\n\n# スコープの考え方\nドキュメントでは借用のルールを踏まえてスコープの考え方に立ち返っている。\n\nこのコードはエラーを出す。\n```rust\nlet mut x = 5;\n// x をミュータブルな借用をしている。\nlet y = &mut x;\n\n// x と同じスコープで借用しているリソースを更新\n*y += 1;\n\n// 2つ目のルールに違反。また、このエラーは所有者のイミュータブルな参照をしようとしているため発生している。\nprintln!("{}", x);\n// error: cannot borrow `x` as immutable because it is also borrowed as mutable\n//     println!("{}", x);\n//                    ^\n```\n\n> 必要なものは、 println! を呼び出し、イミュータブルな借用を作ろうとする 前に 終わるミュータブルな借用です。 Rustでは借用はその有効なスコープと結び付けられます。 そしてスコープはこのように見えます。\n\n```rust\nlet mut x = 5;\n\nlet y = &mut x;    // -+ xの&mut借用がここから始まる\n                   //  |\n*y += 1;           //  |\n                   //  |\nprintln!("{}", x); // -+ - ここでxを借用しようとする\n                   // -+ xの&mut借用がここで終わる\n```\n\n`pintln!`で`x`を渡すのはムーブが起きるのではないのかという疑問は起きつつもこれはどうやら借用であるらしい。それによって起きるルール違反でコンパイルエラーが出るというわけだ。\n\nここからわかることは借用をする場合は所有者とのスコープの衝突を避けることを知っておかなければならない。\n\n# 借用が回避する問題\n> なぜこのような厳格なルールがあるのでしょうか。 そう、前述したように、それらのルールはデータ競合を回避します。\n\n借用の存在意義はデータ競合の回避だと言っている。例えば\n\n## イテレータの無効\n> 一例は「イテレータの無効」です。それは繰返しを行っているコレクションを変更しようとするときに起こります。 Rustの借用チェッカはこれの発生を回避します。\n\n```rust\nlet mut v = vec![1, 2, 3];\n\nfor i in &v {\n    println!("{}", i);\n}\n```\n\n`Vec<i32>`のミュータブルな束縛である`v`をイミュータブルな借用でイテレートしている。この借用は`for`のスコープのみ有効である。\n\n```rust\nlet mut v = vec![1, 2, 3];\n\nfor i in &v {\n    println!("{}", i);\n        v.push(34);\n}\n//  error: cannot borrow `v` as mutable because it is also borrowed as immutable\n//     v.push(34);\n//     ^\n// note: previous borrow of `v` occurs here; the immutable borrow prevents\n// subsequent moves or mutable borrows of `v` until the borrow ends\n// for i in &v {\n//           ^\n// note: previous borrow ends here\n// for i in &v {\n//     println!(“{}”, i);\n//     v.push(34);\n// }\n// ^\n```\n\nミュータブルな束縛であっても借用の仕方によって不意な変更を避けることができることがわかった。　\n\n## 解放後の使用\n> 参照はそれらの指示するリソースよりも長く生存することはできません。 Rustはこれが真であることを保証するために、参照のスコープをチェックするでしょう。\n\nこれも前述のルール通りだ。\n\n```rust\nlet y: &i32;\n{\n    let x = 5;\n    y = &x;\n}\n\nprintln!("{}", y);\n// error: `x` does not live long enough\n//     y = &x;\n//          ^\n// note: reference must be valid for the block suffix following statement 0 at\n// 2:16...\n// let y: &i32;\n// {\n//     let x = 5;\n//     y = &x;\n// }\n//\n// note: ...but borrowed value is only valid for the block suffix following\n// statement 0 at 4:18\n//     let x = 5;\n//     y = &x;\n// }\n```\n\nこれは少し分かりづらい。まず、外側のスコープで`i32`の参照を束縛するために`y`を宣言した。内側のスコープでは`i32`である5を`x`に束縛し、その参照を`y`に束縛しようとした。コンパイラはそこでエラーを出している。\nなぜなら、内側のスコープを抜けた瞬間に`x`のリソースは解放されてメモリ上から存在をなくしているため、存在しない`x`の参照を持つ`y`が外側のスコープで生きているからである。\n\n> 言い換えると、 y は x が存在するスコープの中でだけ有効だということです。 x がなくなるとすぐに、それを指示することは不正になります。 そのように、エラーは借用が「十分長く生存していない」ことを示します。なぜなら、それが正しい期間有効ではないからです。\n\nこれはすごく安全という印象を受ける。\n\nまた\n\n> 参照がそれの参照する変数より 前に 宣言されたとき、同じ問題が起こります。 これは同じスコープにあるリソースはそれらの宣言された順番と逆に解放されるからです。\n\n```rust\nlet y: &i32;\nlet x = 5;\ny = &x;\n\nprintln!("{}", y);\n// error: `x` does not live long enough\n// y = &x;\n//      ^\n// note: reference must be valid for the block suffix following statement 0 at\n// 2:16...\n//     let y: &i32;\n//     let x = 5;\n//     y = &x;\n//\n//     println!("{}", y);\n// }\n//\n// note: ...but borrowed value is only valid for the block suffix following\n// statement 1 at 3:14\n//     let x = 5;\n//     y = &x;\n//\n//     println!("{}", y);\n// }\n```\n\n参照(`&x`)がそれの参照する変数(`y`)と読み替えられる。つまり`x`より先に宣言した`y`は`x`より寿命が長いためにエラーが出ているということだ。\n\n> 前の例では、 y は x より前に宣言されています。それは、 y が x より長く生存することを意味し、それは許されません。\n\nそう、自分より寿命の短い変数の参照はどうあがいても取得できないためである。\n\n\nなんかあとライフタイムが続くぽいが長くなったので分割。','\n',char(10)),1,'2017-02-23 22:27:15','2017-02-23 22:27:15');
INSERT INTO articles VALUES(17,'kokoro.io と私',replace('[kokoro.io Advent Calendar 2017](https://adventar.org/calendars/2519) 3日目の記事です。前回は[pgrhoさんの記事](https://kaiita.com/_/kokoro-io-advent-calendar-day-2)でした。ｻﾞﾏﾘﾝﾎｰﾑｽﾞは黒須プラットフォームであることがわかりましたね。\n\nkokoro.ioの機能や今後の展望などは今後の記事に譲るとして、今回の記事ではクローズドβとして公開されているkokoro.ioが今に至るまでの経緯を私が知る限りの範囲で少しばかり振り返ってみたいと思います。\n\n# 私です\nkokoro.ioの主にフロントエンドを思いついた時にいじってる程度の人間です。kokoro.io上では全然関係ない名前で存在しています。よく[プリパラチャンネル](https://kokoro.io/channels/LQD2XCEQJ)にいるのでよろしくお願いします。\n\n# 私とkokoro.io\n私がkokoro.ioの開発に携わったのはさかのぼること2016年11月頃だったと思います。当時勤めていた会社でマンネリを感じていて「Railsでも触って転職すっか〜」というモチベーションでどんなアプリを作るかと思案していたところ、唐突に[s10a](https://twitter.com/supermomonga)さんの作っていたkokoro.ioの存在を思い出しました。\n\nその当時のkokoro.ioはまともにチャット機能が実装されておらず忘れられたオーパーツという趣で、完全に風化したプロダクトでした。\n\n私はとりあえずアプリケーションのコードを読む前にRails5にアップグレードする作業を始めました。これが最初のきっかけです。\n\n(コミットログをチラッと確認したところ2015年12月23日を最後のコミットに1年近く更新がなかったようです。s10aさんの孤独な戦いを伺い知れます。)\n\n# 再び胎動し始めたkokoro.io\nRails5へのアップグレードをしたコミットによってkokoro.ioは息を吹き返す最初のきっかけを得ました。s10aさんのやる気が増えた結果、部屋の掃除などをするようになったりSlackで開発用チームが作られたりとkokoro.ioを複数の人間たちで開発していく体制が整い、デプロイ環境やCI、フロントエンドの整備が行われた時点で完全にkokoro.ioには再び血が通い始めて温度を持ち始めたと思います。\n\n私がサーバーサイドのテストを追加したりGrapeの導入など細々とした作業をしている傍ではs10aさんや[kamichiduさん](https://twitter.com/kamichidu)が豊富な知識と技術力でいつのまにかフロンエンドやデプロイ環境の整備、チャット機能の根幹となるサーバーサイドを実装していたのは脱帽です。あまりの物事のスピードに転生して歯が生え変わるかと思いました。\n\nそう。気づけば、kokoro.ioでリアルタイムな会話ができていたのは疑いようもない事実だったのです。\n\n# 活発になるkokoro.io\n最低限の機能を備え始めた時点でドッグフーディングを視野に入れた機能要件の議論が日々行われるようになりました。割とシームレスにSlackからkokoro.ioに移行できたので時期は全く覚えていませんが、ものすごく感動を覚えた気がします。この時点ですでにクローズドβとして全世界にインターネットされました。\n\n先述の通り詳しい機能はそのうち記事になると思いますが、bot機能が使える状態になったことでgithubやCIの連携が実現されてもはや完全にドッグフーディストとして恥ずかしく状態になったのは記憶に新しいところです。\n\nそして、ユーザーの受け入れがはじまりSlackのメンバーだった人間たちはもちろんのこと、VimConfなどによって大勢の新規人間たちがkokoro.ioの管理下に置かれたのはいうまでもありません。\n\nこの辺りで完全に自分の作ったものが人間の手によってバグ報告されてきていい感じになってきました。\n\n# モバイルアプリの登場\nみなさんはすでにkokoro.ioアドベントカレンダー2日目の記事を読んでいることでしょうからkokoro.ioにモバイルアプリがあることをご存知でしょう。pgrho氏が開発していて今後もアドベントカレンダーで記事を書きまくることと思いますが、pgrho氏の参加もかなりの起爆剤になっています。\n\nモバイルアプリが出てきたことでレスポンシブ対応が不十分だったことに起因するkokoro.ioを利用するモチベーションがかなり改善されたと、少なくとも私は思っています。\n\nまた、pgrho氏からAPIのユースケースについて指摘をもらったりなんだりで品質を上げるきっかけを色々もらってる気がします。\n\ns10aさんかpgrho氏あたりに適当に使いてえという旨を伝えればなんか使えるようになると思います。噂ではなんかするとアレできるページが特設されるような話もあるようですが、知りません。\n\n# 得たもの\nkokoro.io開発を通じてDockerとかVuejs, TypeScriptとかはものを作るのに困らない程度の知識を身につけることができた気がします。Railsは根本的にあまり興味が湧かなかったというのもあって依然よくわからないまま気が向いた時に修正とかテスト追加してるレベルですけど。\n\n当時の職場への不満感から反骨心に近いものを原動力に手を出したものですが、結果的にはポジティブに開発がすすめられています。\n\n皆さん、今溜まっている鬱屈としたドロドロした感情があるとしたら何かを生み出すいい機会かも知れませんよ。なんかこう、自家中毒を起こさないでヘドロを消化できる感じがしていい。\n\nあとなんかやたら能力の高い得体の知れない人間の知り合いが微妙に増えたりして面白いです。\n\n# kokoro.ioのこれから\n技術的な課題は置いておくとして、kokoro.ioは今ある構想の機能要件のうち3割くらいしか実現できてないと思います。あとアクティブユーザーが少なすぎて内輪感も否めません。\n\nクローズドβという立ち位置ではありますが、チャットの機能自体は普通に使えるのでコミュニケーションツールとしては最低限のラインは担保してるしガンガン使い倒してほしいという思いがあります。\n\n残念ながら私の交流範囲は著しく狭いのでユーザーを増やすことはできませんので皆さんが広めるしかありません。あとは頼んだ。\n\nアドベントカレンダーですが、早速明日誰も書く人がいないから今すぐ適当なチャンネルに参加してそのチャンネルについてのアレとかを記事にするとか、そういうことをしていったらいいと思います。\n\nおわり','\n',char(10)),1,'2017-12-03 00:00:00','2017-12-03 00:00:00');
INSERT INTO articles VALUES(18,'kokoro.ioのAPIレスポンスエンティティ管理の妥協点',replace('[kokoro.ioアドベントカレンダー](https://adventar.org/calendars/2519)4日目の記事です。昨日はbokuさんのアレでした。\n\n今日は書くつもりなかったのですが、誰もかかなさそうなので思いつきで書きます。\n\nkokoro.ioはフロントエンドとがTypeScript + VueJS, バックエンドがRuby on Railsという構成です。\n\nサーバー側は歴史的経緯によりSPAで作っているチャット画面が問い合わせるRESTful APIサーバーとコントローラーが並存しています。\n\n今回はkokoro.io開発にあたってAPIの設計と悩みどころと妥協点を挙げます。多分割と一般的な話だと思う。\n\n# エンティティの循環参照\n`GET /v1/channels` と `GET /v1/memberships` はお互いにチャンネルの情報とメンバーシップの情報を持っています。\n\nそうした場合、エンティティの定義は再利用したいというのが世の常ですがナイーブに実装すると当然循環参照が起きてしまします。\n\nそこで、以下のようなワークアラウンドで対応しています。\n\n```ruby\nclass ChannelEntity < Grape::Entity\n  expose :membership, ...\n  ...\nend\n\n# ChannelEntity 内の membership を外す\nclass ChannelWithoutMembershipEntity < ChannelEntity\n  unexpose :membership\nend\n\nclass MembershipEntity < Grape::Entity\n  expose :channel, documentation: { type: ChannelWithoutMembershipEntity, desc: ''チャンネル情報'' }, using: ChannelWithoutMembershipEntity\n  ...\nend\n```\n\n私が実装したのですが我ながら最悪ですね。でもこうするしかなかった。多分設計が悪いんですけど、ダルすぎてあんまり再考していません。\n\n`MembershipEntity`にチャンネルの情報をもたせたい理由を考えてみます。\n\nログインユーザーが最初にチャット画面を開く瞬間、裏側では自分の参加しているチャンネル一覧を取得しに行っています。そのエンドポイントは`GET /v1/memberships`だったりします。\n\nなぜメンバーシップを取りに行ってるかというと、ログインユーザーのメンバーシップはチャンネルに対して当然一意だからです。\n\n問題なのはチャンネルをアクティブにした時に自分の以外のメンバーシップを取得する必要があり、そのエンドポイントが`GET /v1/channels`なのです。\n\nチャンネルリソースに生えているメンバーシップリソースの取得という意味では理屈はあっています。なのでここもいじりようがありません。\n\nようはリソースの主従がはっきりしていないことが原因です。でも、ダルい。。。。。。無限に。リプレイスが計画されているようなのでそこでごっそり変えると思います。\n\n良くなる。そう言っておきます。\n\nちなみに、GraphQLは？みたいな話も当然出たんですがなんとなく食指が動かないとか、あとなんかユースケースにあってなくね？みたいなところがあった気がするけど全部忘れた。\n\n# フロントエンドのエンティティ管理\nTypeScript を使っているんだから、 APIのエンティティスキーマを型としてフロントエンドでも管理したいですよね。\n\nただ、現状はそこまで手が回っておらずカオスです。どの程度カオスかというと\n\n```javascript\nexport interface Channel {\n  id: string | null;\n  requestParams: {\n      limit: number;\n      before_id: number | null;\n  };\n  channel_name: string | null;\n  messages: Array<Message>;\n  member_id: string;\n  authority: string;\n  memberships: Array<Membership>;\n  reachedEnd: boolean;\n  nobodyPost: boolean;\n  unreadCount?: number;\n  kind?: ChannelKind;\n  draftMessage: DraftMessage;\n  transitMessagesMap: object;\n  fetchingMessage: boolean;\n  fetchingMemberships: boolean;\n  currentScrollPosition: number;\n  atScrollBottom: boolean;\n  initialMessagesFetched: boolean;\n  depth: number;\n  displayName: string | null;\n}\n```\n\nぱっと見では伝わらないと思いますが、なぜ主キーであるidがnullableなの？とかがわかりやすいと思います。\n\nこれは、、、、、、、、ですね、、、、、、その、、、、、、、チャンネル取得前のダミーチャンネルと実態としてのチャンネルを一つのインターフェースで表現しようとしているからです。\n\nまた、APIのエンティティに存在しないプロパティが生えまくっています。\n\nこれはフロントエンドの文脈とAPIレスポンスの文脈を一つのモデルで扱おうとして起きている問題です。\n\nただ、まあこれに関しては鋭意直してます。修正方針は明快で、フロントエンドでも頑張ってエンティティの定義に追随しよう、フロントエンド独自のインターフェースとしてエンティティの型とは明確に分けよう。\n\nというものです。最初からそうやれや。。。。。。。。\n\n\n# これらの割れ窓が存在する理由\n気合が足りません。仲間を思う気持ち、絆、思いやり、地元愛、それらの大切な要素が欠如している結果だと思います。\n\n# 泣けるという方へ\n泣きましょう。どうぞ、泣いてください。好きなだけ泣いて、全部を受け入れましょう。\n\n\n〜fin〜','\n',char(10)),1,'2017-12-04 19:32:39','2017-12-04 19:32:39');
INSERT INTO articles VALUES(19,'kokoro.io のフロントエンド事情　',replace('この記事は[kokoro.ioアドベントカレンダー](https://adventar.org/calendars/2519)7日目の記事です。5, 6日分が空席なので、ご自由に。\n\n今回はkokoro.ioのフロントエンド事情についてつらつらと書きます。\n\n先に断っておくと、フロントエンドのスペシャリストでもない(むしろ申し訳程度)し先進的な技術選択や技術的挑戦は特にしていません。\n\n# 使用している技術要素\n基本的にはTypeScript + VueJSをwebpackでES2015にトランスパイルする今では当たり前の組み合わせです。\n\nVueJSは状態管理とSPAのラウティングを目的としてvuexとvue-routerを使用しています。UIコンポーネントは使っていません。\n\n## なぜVueJSなのか\n[kamichiduさん](https://twitter.com/kamichidu)が環境を整えてくれたからその流れでという感じです。思ったほど学習コスト高くなくていい感じです。\n\nkokoro.ioではSFCではなくvueテンプレートとコンポーネントとスタイルを別ファイルで分けています。\n\n下のような構成になります。\n\n```sh\nComponentA\n  - index.ts (エントリポイント)\n  - ComponentA.vue (vueテンプレート)\n  - ComponentA.vue.ts (コンポーネント定義)\n  - style.css (スタイル)\n  - ChildComponent\n    - ...以下同様\n```\n\nこれも歴史的経緯です。\n\n# VueJSのはなし\nVueJSはkokoro.ioで初めて触りました。それまではmithril.jsとかMariontteJSくらいしかまともに触ったFWはありませんでした。\nなので色々トンチンカンなことをしでかしてます。\n\n## vuex を誤解していた\nかつて、親子関係を意識していなかったコンポーネント設計を見直すためにそれまでのpropsのバケツリレーでは限界が見えて来たので、[vuex](https://vuex.vuejs.org/ja/intro.html)導入を決めました。\n\n仕事してるし、なんか怠けたりする必要があったのでなんだかんでvuex導入には約1ヶ月くらいかかったのですがなんとか動く感じになりました。\n\nvuex導入に際して私は「コンポーネントの構成に合わせてvuexもネストさせなくてはいけない」という使命感に支配され、そんな風に実装して今に至ります。\n\nただ、私はvuexについて大きな誤解をしていました。vuexはあくまでグローバルステートをコンポーネントの階層問わずいい感じにアクセスできるようにしてくれるだけであって、それはコンポーネントの構造とは全く無関係なわけです。\n\nkokoro.ioで言えばどんな階層からも知りたい状態として「選択中のチャンネル」(これをアクティブチャンネルと呼びます)が挙げられます。それ以外の例えばチャット表示画面の一つのメッセージを表現するコンポーネントの状態をチャンネル一覧が知る必要はありません。\n\nコンポーネントが自分自身の状態を管理するのはdataの役目なので、つまりそういうことです。ここを履き違えるとrootレベルのactionからモジュールレベルのmutaionを呼び出したり、モジュールレベルのmutaionsにrootStateが頻発する可能性が出て来て結果的にvuexクソ！！みたいな短絡をおこしかねません。(馬鹿げていますが、本当に起きていました)\n\nそれともう一つ、管理したいのはアクティブチャンネルがなんなのかであってモデル層をどうこうするのとは切り離して考えるべきです。\n\n意味がわからないと思いますが、チャンネルオブジェクト諸々プロパティを更新するのにaction経由でやってました。本来はモデル層にメソッドを生やしてやるべきだというのに。\n\n```js\n// actionの定義\n{\n  async fetchMessages({state}): {\n    const resp = await state.request(state.activeChannel.id)\n    resp.map(c => {\n      ....\n    })\n  }\n}\n```\n\nみたいなことをしていて、完全にクソです。\n普通にコンポーネント内で\n\n```js\n  yaruzoHandler(): {\n    this.activeChannel.fetchMessages()\n  }\n```\n\nとかでいい。VueJS 初心者だったとかいう次元の話でもないので虚しい。　\n\nここではチャンネルを例に出してるけどチャンネルだけじゃないし、まあ人生いろいろあります。\n\n### 何が言いたいのか\nvuexはシンプルに使うべきです。モデル層のロジックはモデルに生やすべきだし、グローバルステートをこねくり回す責務だけ突っ込めばいい。という当たり前の結論です。すいません。\n\n## vue-property-decorator が素晴らしい\n素晴らしい。decorator はガンガン使っていきたい。みなさん有効にしましょう。現場からは以上です。\n\n## その他\nwebpack は別に慣れてるので特にアレだし、TypeScriptはいいですね、としか言いようがない。今、VueJS関連で一番の関心はVueJSのUIコンポーネントです。気が熟したら[element](http://element.eleme.io/#/en-US/component/installation)か何かに乗り換えようと考えています。\n\nBootstrapの何が嫌かというとjQuery依存な点です。jQueryは別に嫌いじゃないですけど、依存が存在する状態自体は嫌いです。\n\nそんなところかな。明日はpgrhoさんです。楽しみにしましょう。\n\nおしまい','\n',char(10)),1,'2017-12-07 00:00:00','2017-12-07 00:00:00');
INSERT INTO articles VALUES(20,'kokoro.ioでbotを作ろう',replace('[kokoro.ioアドベントカレンダー](https://adventar.org/calendars/2519)10日目の記事です。今回はkokoro.ioでbotを作る手順をｼｪｱｰします。\n\n公式ドキュメントとかないのですが、そのうち作られるかもしれない。\n\n1. botアカウント作成\n1. botプログラム作成\n1. botをチャンネル登録\n\n# botアカウント作成\n[ここ](https://kokoro.io/bots/new)から入力項目を満たせば完了です。ところでBot一覧とはなんでしょう？私もわかりません。\n\nアカウントが作られるとbot用のアクセストークンが付与されるのでそいつを今後使います。\n\n# botプログラム作成\nでは、早速作ってみましょう。\n\n特に明示されていない部分ですが、現在の使用では次の2種類の方法でbotを動かすことができます。\n\n- チャンネルのメンバーの発言に対して任意の発言をする\n- 任意のタイミングまたは定時バッチで発言をする\n\nいずれの処理も、botの発言としてはリクエストヘッダに`X-ACCESS-TOKEN=<アクセストークン>`を指定して[POST /v1/bot/channels/{channel_id}/messages](https://kokoro.io/apidoc#!/bot/postV1BotChannelsChannelIdMessages)で行います。\n\nまた、無差別なCallback urlへのリクエストが起き得るのですが、リクエストヘッダに生えている`Authorization`プロパティの値と`callback_secret`でバリデーションを行います。\n\nbot用エンドポイントのペイロードについてはAPIドキュメント参照のこと。\n\n## チャンネルのメンバーの発言に対して任意の発言をする\nCallback urlを入力すると、botが参加しているチャンネルにおけるメンバーの発言をペイロードとしてCallback urlにリクエストが来ます。\nCallback urlで待ち受けているbotがペイロードを解析して任意の処理を行うわけです。\n\nコード例としてAPIの変更に追いついてなくて動かなくなっている[KFC bot](https://github.com/mtwtkman/kfc-kokoroio-bot/blob/master/src/main/scala/io/kokoro/bot/KfcServlet.scala#L54-L95)のコードをちょっといじって挙げてみます。\n\n```scala\n...\npost("/") {  // Callback url のルートパス\n  val body = parse(request.body)\n\n  // callback_secret のバリデーション\n  request.getHeader("Authorization") match {\n    case x if x == callback_secret =>\n    case _ => {\n      logger.debug("Invalid callback_secret")\n      halt(401, "Invalid callback_secret")\n    }\n  }\n\n  // 発言内容のパース\n  val parsed: List[(String, String)] = for {\n    JObject(elem) <- body\n    JField("raw_content", JString(message)) <- elem\n    JField("room", JObject(room)) <- elem\n    JField("id", JString(room_id)) <- room\n  } yield (message, room_id)\n  parsed match {\n    case List((message, room_id)) if message.matches(TORI_PTN) && room_id != "" => {\n\n      // botのリアクション作成\n      val tori_message = calc_date() match {\n        case Some(day) => s"次のとりの日まであと`${day}日`です"\n        case None => "今日はとりの日です!今すぐとりの日パックを買いましょう!"\n      }\n      val req_data = s"""{\n        "message": "$tori_message",\n        "display_name": "KFC"\n      }"""\n      val url = s"${API_ENDPOINT}${room_id}/messages"\n      logger.info(s"post ${tori_message} to kokoro.io")\n      val resp = Http(url)\n        .postData(req_data)\n        .header("Content-Type", "application/json")\n        .header("X-Access-Token", access_token)\n        .asString\n    }\n    case _ => {\n      logger.debug(s"Not matched with `${TORI_PTN}`")\n      halt(401, "Not matched")\n    }\n  }\n}\n```\n\n楽チンですね。\n\n## 任意のタイミングまたは定時バッチで発言をする\nこれも簡単です。botのアクセストークンを使って好きなタイミングで発言したらおしまいです。\n\nよかったですね。\n\n# botをチャンネル登録\n普通にbotのIDを指定してチャンネルに招待してやれば登録完了です。\n\n自分の管理しているbotは[ここ](https://kokoro.io/bots)から確認できます。\n\n# 今の仕様でできないこと\nできないだけで対応しないわけではないと思います。あんまりポリシーはわかってないので詳しく知りたければ[s10aさん](https://twitter.com/supermomonga)に質問してみると何かわかるかもしれません。\n\n## websocketのイベントが監視できない\n例えばメンバーがチャンネルにjoinしたイベントをbotが捕捉することはできません。もちろん手動でwebsocketのコネクションを作って任意のチャンネルをsubscribeすれば技術的には可能です。まあでも非公式です。\n\n## アバター画像が変更できない\n`display_name`は変えられるんだけどアバター画像は変更できません。\n\n## ホストしているbotをオーナー以外に共有ができない\n1botにつき1つのcallback_secretを持ってるのでとあるbotを流用したいとなった時はbotを新規に登録してcallback_secretを発行した上でさらに、そのbotのソースコードを手に入れて自分の環境で動かさねばなりません。\n\n# クライアントライブラリ\n私の確認してる限り、`C#`と`Python`バインディングがあります。　\n\n- [kokoro-io-net](https://github.com/kokoro-io/kokoro-io-net): pgrho氏が作ってる\n- [kokoro-io-py](https://github.com/mtwtkman/kokoro-io-py): 拙作。メンテしてないので動かない可能性がめっちゃ高いのと実装いい加減なのでPRください。\n\n一説によるとbotを作ると健康が良くなりますので、よろしくお願いします。\n\n現場からは以上です。','\n',char(10)),1,'2017-12-10 00:00:00','2017-12-10 00:00:00');
INSERT INTO articles VALUES(21,'kokoro.ioを支えるプリパラ',replace('[ko](https://adventar.org/calendars/2519)です\n\nさて、いよいよ(あるにはあるけど)話題がなくなったしどうせ誰も読んでいないので今回はプリパラについて書きます。好きだから…\n\nとはいえ、kokoro.ioと無関係なことを書くのは流石に気がひけるのでちゃんとkokoro.ioと関係のある話題にしているつもりです。\n\nプリパラはkokoro.io開発になくてはならない要素でした。虚実交えつつプリパラがいかにしてkokoro.io開発を支えたかをお伝えできればと考えています。\n\nただし、プリパラを語りつくすのは到底無理な話なのでこの記事の目的を、重ね重ね言うようですがkokoro.ioとの関わりという観点に絞りたいと思います。\n\n# プリパラとは\nプリパラはプリティーリズムシリーズに系譜を持つアーケードゲームです。プレーヤーはライブを重ねてアイドルランクを上げ、様々なコーデやチームを組んで神アイドルを目指します。\n\nアーケードゲームに連動して販促アニメとしてプリパラがあるわけですが、どんなメディアが展開されているかという話題自体はあくまで経済活動の一端であり即物的な話でしかありません。\n\n本質的にはプリパラとは女の子たちの憧れです。おともだちと切磋琢磨して神アイドルとなるために努力を惜しまず、決して諦めず、心の底から楽しむためのプラットフォームです。\n\n作中、プリパラの運営母体については明らかにされておらず、言及もされません。現代に生きる我々にとって日常生活に車が街中を走っているのと同じように作中ではプリパラが存在しているのです。\n\nkokoro.ioを開発しているメイン開発者の[s10aさん](https://twitter.com/supermomonga)、スマホ版アプリを開発している[pgrho氏](https://twitter.com/pgrho)は重篤なプリパラファンです。\n\nかくいう私もその一人で、2017年4月頃よりプリティーリズムシリーズ含めてプリパラにどっぷりと虜になってしまっているにわかではあるもののプリパラファンの一人です。\n\nここでいうプリパラファンはメディア問わずにプリパラを純粋に楽しんでいるという意味です。\n\n# プリパラが与えるkokoro.ioへの影響\nまず、影響**しない**こととして言えるのはkokoro.ioのソースコードそのものです。ガァルマゲドンが結成したからといって画像アップロード機能が実装されるわけではありません。まずこのことは断っておきます。\n\nここで考えられる一番の影響はハブとしての目に見えない副次的な効果です。プリパラの主な効果はアイドルたちの成長や葛藤に感化されて多面的な感情の高ぶりが挙げられます。しかしそれは一番の影響としませんでした。\n\nなぜなら、一人の熱量を上げるよりもプリパラを介して集まった人間たちのマインドセットのグロースがシナジーを生み出し、乗数効果を持ったコミットを生み出すからであります。\n\nようはプリパラ見ようぜ、プリパラの曲聴こうぜと曖昧な提案によりモハに人が集まることで直接的な会話やフィードバックが発生し、なんとなく開発が進んだり溜まっていた資源ゴミが捨てられるなどの人間活動にすら介入する現象が観測されたわけです。\n\n# プリパラの楽しみ方\nプリパラは基本的に楽しいです。キャラの魅力も当然あるのですが、1期2期に関しては主人公の真中らぁらの掲げる「みんな友達、みんなアイドル」というモットーを主軸にストーリーが進むため、視聴の仕方にも一貫性が生まれます。\n\nおそらくですが、kokoro.ioにも一貫性はあります。ここでいう一貫性とは、s10aさんの脳内である程度の仕様やユーザーが固まっているという意味で、場当たり的にその場しのぎでキャッチーな機能をなんとなく入れたのではうまくいっても何かの模倣でしかないし、そもそもユーザーが定着しないはずです。\n\nかといって完全オリジナルというわけでもなく、いいものはいいと既存のサービスからアイデアを拝借するという柔軟さを以ってして我々は今日もプリパラとkokoro.io開発ないしはkokoro.ioでのチャットを楽しんでいるわけです。\n\n# プリパラちょっといい話\n## ぷりのままで\nkokoro.io開発に首を突っ込みだした頃の私はプリパラを知らず、s10aさん宅(以下モハ)で流れる当時単なる電波ソング、あるいは空気の振動として関心もくれなかったぷりっとぱ〜ふぇくとを幾度となく耳にしました。\n\nぷりっとぱ〜ふぇくとという曲はらぁらと共に神アイドルを目指す南みれぃが「アイドルとしての自分」に疑問を抱きアイドルを辞める決意をする苦境を乗り越えた上で「ポップアイドルみれぃのらしさ」を凝縮した信念の塊のような楽曲です。\n\nある夏の出来事、いつものようにモハでぷりっとぱ〜ふぇくとを延々と耳にし帰宅した夜、私は知らぬ間にyoutubeでぷりっとぱ〜ふぇくとを検索し再生していることに気づいてしまったのです。\n\nそれからは意識的に、自然とストーリーを知らずとも私は本能的にみれぃの信念を理解し、プリパラの視聴を始めました。\n\nプリパラの視聴を全て終える頃、私はvuexの導入に取り掛かかっていました。修正範囲があまりにも大きく、またデグレなしでイベント管理の設計もせねばならなかったあの頃は「こんなに修正コストかける意味あんのか？」と自分の作業に疑問を持っていました。\n\nそんな折、みれぃの苦悩を思い出したわけです。みれぃは決して妥協をせずだからこそ自分のアイドルとしての適性に疑問を感じた瞬間にアイドルを辞めるという短絡とすら思える決断をしたわけです。\n\n時にはプリパラ内外でキャラ付けをしていた自分ではファルルに勝てないと考えたみれぃはキャラを捨てて語尾のぷりを捨てようかとも考えていました。しかし結果的にキャラ付けと考えていたはずのみれぃは南みれぃ本人と切ってもきれない状態だったのです。\n\n私はそんなみれぃを思い出して悩みの種類は全く違えど彼女の逆境を受け入れる姿勢に畏敬の念を禁じ得ず、こう決意しました。「ぷりのままで」\n\nそうして、vuex導入は約1ヶ月の時を経て完遂されたのでした。\n\n## トンでもSUMMER ADVENTURE\nドレッシングふらわーは私の人生に一つの節目を与えました。トンでもSUMMER ADVENTURE以前と以降です。トンでもSUMMER ADVENTUREは私にとって示唆的でした。\n\n本来別のチームとして活動しており、互いに疎の関係であるドレッシングパフェの3人とふわり、らぁらは運命のいたずらか濁流に飲まれながらも決して諦めずお互いの手を取り助け合って思いを一つに協調した結果チーム結成しました。(お互いを高めあう好敵手という見方をしたい気持ちはわかりますが、ここではそのような観点は控えます)\n\n疎にして協調すること、これはシステム開発も同じことが言われていますし、私もそう思います。\n\nVueJSはコンポーネント指向のフレームワークであり、kokoro.ioでも当たり前のように役割ごとにコンポーネントを分けています。\n\n疎であるがゆえに互いの関心を分離することでメンテナンス性と拡張性を担保するわけです。そして、自由にコンポーネントを組み合わせることで一つの大きなコンポーネントを組成することができる。\n\nドレッシングパフェもまたウェスト姉弟と東堂シオンという分け方で言えば出自としては疎です。お互い生まれに何も影響を及ぼしません。\n\nこのように我々は悪く言えば無関心、しかし可能な限り関係を分離しておくことで必要な時またはお互いの気持ちを一つにして協調関係を作って何倍もの効果を生みだすためには何事も疎にしておく必要があるということがわかります。\n\nとはいうものの、kokoro.ioの文脈で言えばオープンソースのコンポーネントライブラリではないので再利用性よりも機能要件の充足を優先するべきです。\n\nそうした場合、全てを疎にすることよりも何を実現するかに焦点を当てる必要があります。そんな時、私はキーボードから手を離しコーヒーを淹れます。\n\n部屋にはトンでもSUMMER ADVENTUREの一節が流れます。〽︎スリルと背中合わせで上等\n\n私は結束力という字を頭に浮かべながら密結合なコンポーネントを作る勇気を持ったのです。いくばくかのスリルを伴いながら…\n\n# 結びに\nみなさんもプリパラ、いかがですか\n\n\n終わり','\n',char(10)),1,'2017-12-16 00:00:00','2017-12-16 00:00:00');
INSERT INTO articles VALUES(22,'www','hogex',0,'2018-09-25 12:22:10','2018-09-25 12:22:10');

INSERT INTO tags VALUES('rust');
INSERT INTO tags VALUES('webpack');
INSERT INTO tags VALUES('misc');
INSERT INTO tags VALUES('python');
INSERT INTO tags VALUES('mithril');
INSERT INTO tags VALUES('javascript');
INSERT INTO tags VALUES('kokoro.io');

INSERT INTO taggings VALUES('misc',1);
INSERT INTO taggings VALUES('python',2);
INSERT INTO taggings VALUES('javascript',2);
INSERT INTO taggings VALUES('mithril',2);
INSERT INTO taggings VALUES('webpack',2);
INSERT INTO taggings VALUES('python',3);
INSERT INTO taggings VALUES('python',4);
INSERT INTO taggings VALUES('javascript',5);
INSERT INTO taggings VALUES('python',6);
INSERT INTO taggings VALUES('python',7);
INSERT INTO taggings VALUES('python',8);
INSERT INTO taggings VALUES('javascript',9);
INSERT INTO taggings VALUES('javascript',10);
INSERT INTO taggings VALUES('mithril',10);
INSERT INTO taggings VALUES('javascript',11);
INSERT INTO taggings VALUES('mithril',11);
INSERT INTO taggings VALUES('javascript',12);
INSERT INTO taggings VALUES('mithril',12);
INSERT INTO taggings VALUES('javascript',13);
INSERT INTO taggings VALUES('mithril',13);
INSERT INTO taggings VALUES('python',14);
INSERT INTO taggings VALUES('mithril',15);
INSERT INTO taggings VALUES('rust',16);
INSERT INTO taggings VALUES('kokoro.io',17);
INSERT INTO taggings VALUES('kokoro.io',18);
INSERT INTO taggings VALUES('kokoro.io',19);
INSERT INTO taggings VALUES('kokoro.io',20);
INSERT INTO taggings VALUES('kokoro.io',21);
